;Z550 SW-R6GA004
;Библиотека функций
;(c) Hussein , IronMaster
;(p) Karl05, stuCk

+456BFC00
0448: FFFFFFFF E175DF44 ; 112: void* memset( void* mem, char chr, int size );
044C: FFFFFFFF 5C531844 ; 113: int memcpy( void* dest, const void* source, int cnt );
0450: FFFFFFFF E580DF44 ; 114: int sprintf( char* buf, const char* fmt, ... );
0454: FFFFFFFF BD87DF44 ; 115: int snwprintf( wchar_t* buffer, int size, const wchar_t* fmt, ... );
0458: FFFFFFFF A17F5645 ; 116: int _fopen( const wchar_t* filpath, const wchar_t* filname, unsigned int mode, unsigned int rights, FILELISTITEM* destfname);
045C: FFFFFFFF D9915645 ; 117: int fclose( int file );
0460: FFFFFFFF 39945645 ; 118: int fread( int file, void* ptr, int size );
0464: FFFFFFFF 1D965645 ; 119: int fwrite( int file, const void* ptr, int size );
;0468: xxxxxxxx yyyyyyyy ; 11A:
;046C: xxxxxxxx yyyyyyyy ; 11B:
0470: FFFFFFFF 15885645 ; 11C: int fstat( const wchar_t* path, const wchar_t* fname, FSTAT* fstat_stuct );
0474: FFFFFFFF F1625645 ; 11D: DIR_HANDLE* AllocDirHandle( const wchar_t* path );
0478: FFFFFFFF 75645645 ; 11E: FILELISTITEM* GetFname( DIR_HANDLE*, FILELISTITEM* );
047C: FFFFFFFF 2D392145 ; 11F: void* DataBrowserDesc_Create( void );
0480: FFFFFFFF 85382145 ; 120: void DataBrowserDesc_SetItemStyle( void* DataBrowserDesc, int style );
0484: FFFFFFFF A5382145 ; 121: void DataBrowserDesc_SetHeaderText( void* DataBrowserDesc, TEXTID );
0488: FFFFFFFF 95382145 ; 122: void DataBrowserDesc_SetFolders( void* DataBrowserDesc, const wchar_t** FolderList );
048C: FFFFFFFF AD382145 ; 123: void DataBrowserDesc_SetOKSoftKeyText( void* DataBrowserDesc, TEXTID );
0490: FFFFFFFF A12E2145 ; 124: void DataBrowser_Create( void* DataBrowserDesc );
0494: FFFFFFFF B5392145 ; 125: void DataBrowserDesc_Destroy( void* DataBrowserDesc );
0498: FFFFFFFF F9AA5645 ; 126: wchar_t* getFileExtention( wchar_t* fname );
049C: FFFFFFFF A9665645 ; 127: int DataBrowser_isFileInListExt( const wchar_t* ext_table, const wchar_t* path, const wchar_t* fname );
04A0: FFFFFFFF D5A82545 ; 128: void Timer_ReSet( u16* timer, int time, TIMERPROC onTimer, LPARAM lparam );
04A4: FFFFFFFF B1A82545 ; 129: u16 Timer_Set( int time, TIMERPROC onTimer, LPARAM lparam );
04A8: FFFFFFFF 01A92545 ; 12A: void Timer_Kill( u16* timerID );
04AC: FFFFFFFF B5B22545 ; 12B: int CreateBook( BOOK* pbook, void (*onClose)( BOOK* ), const PAGE_DESC* bp, const char* name, int ParentBookID, APP_DESC* );
04B0: FFFFFFFF ADB32545 ; 12C: void BookObj_KillBook( BOOK* book );
04B4: FFFFFFFF 31B02545 ; 12D: void BookObj_GotoPage( BOOK* book, const PAGE_DESC* page );
04B8: FFFFFFFF ADB12545 ; 12E: void BookObj_ReturnPage( BOOK* book, int );
04BC: FFFFFFFF DDB72545 ; 12F: void FreeBook( BOOK* book );
04C0: FFFFFFFF 79AB2545 ; 130: BOOK* FindBook( IS_NEEDED_BOOK );
04C4: FFFFFFFF 057B2645 ; 131: BOOK* Find_StandbyBook( void );
04C8: FFFFFFFF F9B42545 ; 132: void BookObj_SetFocus( BOOK* book, int display );
04CC: FFFFFFFF 550D1545 ; 133: void GUIObject_SetTitleText( GUI*, TEXTID );
04D0: FFFFFFFF 3D0C1545 ; 134: void GUIObject_Show( GUI* );
04D4: FFFFFFFF 09D41245 ; 135: void ListMenu_SetCursorToItem( GUI_LIST*, int item );
04D8: FFFFFFFF 9D0C1545 ; 136: void GUIObject_SetStyle( GUI*, int style );
04DC: FFFFFFFF 3DDF1245 ; 137: int GUIonMessage_GetCreatedItemIndex( GUI_MESSAGE* msg );
04E0: FFFFFFFF 4DDF1245 ; 138: char GUIonMessage_SetMenuItemText( GUI_MESSAGE* msg, TEXTID );
04E4: FFFFFFFF 7DDF1245 ; 139: char GUIonMessage_SetMenuItemSecondLineText( GUI_MESSAGE* msg, TEXTID );
04E8: FFFFFFFF 5DDF1245 ; 13A: char GUIonMessage_SetMenuItemInfoText( GUI_MESSAGE* msg, TEXTID );
04EC: FFFFFFFF 6DDF1245 ; 13B: char GUIonMessage_SetMenuItemUnavailableText( GUI_MESSAGE* msg, TEXTID );
04F0: FFFFFFFF 8DDF1245 ; 13C: void GUIonMessage_SetMenuItemIcon( GUI_MESSAGE* msg, int align, IMAGEID );
04F4: FFFFFFFF A5FE2B45 ; 13D: void DispObject_SetTitleText( DISP_OBJ*, TEXTID );
04F8: FFFFFFFF 1DD41245 ; 13E: int ListMenu_GetSelectedItem( GUI_LIST* );
04FC: FFFFFFFF 81D41245 ; 13F: void ListMenu_SetItemStyle( GUI_LIST*, int style );
0500: FFFFFFFF 95F31445 ; 140: void GC_PutChar( GC* gc, int x, int y, int _zero, int zero1, wchar_t wchar );
0504: FFFFFFFF F97A1145 ; 141: int IsScreenSaverBook( BOOK* bk );
0508: FFFFFFFF B50F1145 ; 142: void StatusIndication_SetItemText( GUI*, int item, TEXTID );
050C: FFFFFFFF ED992645 ; 143: void StatusIndication_ShowNotes( TEXTID );
0510: FFFFFFFF 69271245 ; 144: GUI* CreateStringInputVA( int, ... );
0514: FFFFFFFF 05F31245 ; 145: GUI_ONEOFMANY* CreateOneOfMany( BOOK* book );
0518: FFFFFFFF 99F41245 ; 146: void OneOfMany_SetItemCount( GUI_ONEOFMANY*, int count );
051C: FFFFFFFF BDF41245 ; 147: void OneOfMany_SetChecked( GUI_ONEOFMANY*, int checked );
0520: FFFFFFFF F1F41245 ; 148: void OneOfMany_SetTexts( GUI_ONEOFMANY*, TEXTID* strids, int Count );
0524: FFFFFFFF CDF41245 ; 149: int OneOfMany_GetSelected( GUI_ONEOFMANY* );
0528: FFFFFFFF B1982645 ; 14A: void StatusIndication_Item8_SetText( TEXTID );
052C: FFFFFFFF 89871545 ; 14B: void GUIObject_SoftKeys_SetAction( GUI*, u16 actionID, SKACTIONPROC proc );
0530: FFFFFFFF 71881545 ; 14C: void GUIObject_SoftKeys_SetText( GUI*, u16 actionID, TEXTID );
0534: FFFFFFFF DD891545 ; 14D: void GUIObject_SoftKeys_SetEnable( GUI*, u16 actionID, BOOL );
0538: FFFFFFFF 4D891545 ; 14E: void GUIObject_SoftKeys_AddErrorStr( GUI*, u16 actionID, TEXTID );
053C: FFFFFFFF 19871545 ; 14F: void GUIObject_SoftKeys_RemoveItem( GUI*, u16 actionID );
0540: FFFFFFFF 09891545 ; 150: void GUIObject_SoftKeys_SetVisible( GUI*, u16 actionID, BOOL );
0544: FFFFFFFF 858D1545 ; 151: void GUIObject_SoftKeys_SuppressDefaultAction( GUI*, u16 actionID );
0548: FFFFFFFF 898EDF44 ; 152: wchar_t* wstrcpy( wchar_t* dest, const wchar_t* source );
054C: FFFFFFFF 3D8FDF44 ; 153: wchar_t* wstrncpy( wchar_t* dest, const wchar_t* source, int maxlen );
0550: FFFFFFFF 298EDF44 ; 154: wchar_t* wstrcat( wchar_t* wstr, const wchar_t* subwstr );
0554: FFFFFFFF D98EDF44 ; 155: wchar_t* wstrncat( wchar_t* wstr, const wchar_t* subwstr, int maxlen );
0558: FFFFFFFF 598EDF44 ; 156: int wstrcmp( const wchar_t* wstr1, const wchar_t* wstr2 );
055C: FFFFFFFF C58EDF44 ; 157: int wstrlen( const wchar_t* wstr );
0560: FFFFFFFF 7DA8FA44 ; 158: wchar_t* str2wstr( wchar_t* wstr, const char* str );
0564: FFFFFFFF 4985DF44 ; 159: int strcmp( const char* str1, const char* str2 );
0568: FFFFFFFF B185DF44 ; 15A: int strlen( const char* str );
056C: FFFFFFFF 7596FA44 ; 15B: char* wstr2strn( char* str, const wchar_t* wstr, int maxlen );
0570: FFFFFFFF 45962B45 ; 15C: TEXTID TextID_CreateIntegerID( int num );
0574: FFFFFFFF E1992B45 ; 15D: TEXTID TextID_Create( const void* wstr, TEXT_ENCODING flag, int len );
0578: FFFFFFFF 8DA52B45 ; 15E: void TextID_GetString( TEXTID, char* str, int maxlen );
057C: FFFFFFFF 619D2B45 ; 15F: int TextID_GetWString( TEXTID, wchar_t* dest, int maxlen );
0580: FFFFFFFF 419C2B45 ; 160: int TextID_GetLength( TEXTID );
0584: FFFFFFFF B19B2B45 ; 161: void TextID_Destroy( TEXTID );
0588: FFFFFFFF FDD51D45 ; 162: int AB_DEFAULTNBR_GET( int rec_num, void* mem_0x30, int* unk );
058C: FFFFFFFF 99291E45 ; 163: int AB_READSTRING( AB_STR_ITEM*, int rec_num, int field_ID );
0590: FFFFFFFF 412A1E45 ; 164: int AB_READPHONENBR( AB_NUM_ITEM*, int rec_num, int field_ID );
0594: FFFFFFFF E12A1E45 ; 165: int AB_GETNBROFITEMS( int get_from, int sub_id );
0598: FFFFFFFF C5922B45 ; 166: int PNUM_len( void* pnum );
059C: FFFFFFFF F1993B45 ; 167: void PNUM2str( char* str, void* pnum, int len, int max_len );
05A0: FFFFFFFF 190A1545 ; 168: DISP_OBJ* GUIObject_GetDispObject( GUI* );
05A4: FFFFFFFF 55782445 ; 169: LIST* List_Create( void );
05A8: FFFFFFFF 6D782445 ; 16A: void List_Destroy( LIST* lst );
05AC: FFFFFFFF 69792445 ; 16B: int List_InsertFirst( LIST* lst, void* item );
05B0: FFFFFFFF 95DB3D45 ; 16C: int Gif2ID( u16 IMAGEHANDLE, const wchar_t* path, const wchar_t* fname, IMAGEID* );
05B4: FFFFFFFF 091B5645 ; 16D: int REQUEST_IMAGEHANDLER_INTERNAL_GETHANDLE( const int* sync, u16* ImageHandler, char* unk );
05B8: FFFFFFFF 5D975445 ; 16E: void REQUEST_DATEANDTIME_GET( const int* sync, DATETIME* dt );
05BC: FFFFFFFF B56F4F45 ; 16F: void IndicationDevice_Backlight_FadeToLevel( int unk_zero, int bl_level );
05C0: FFFFFFFF 29B84045 ; 170: int GetFreeBytesOnHeap( void );
05C4: FFFFFFFF 29B52545 ; 171: void BookObj_Hide( BOOK* book, int display );
05C8: FFFFFFFF 3DB52545 ; 172: void BookObj_Show( BOOK* book, int display );
05CC: FFFFFFFF 0D7D2645 ; 173: void StartAPP( const wchar_t* appname );
05D0: FFFFFFFF 71D51245 ; 174: void ListMenu_SetOnMessage( GUI_LIST*, int (*proc)( GUI_MESSAGE* ) );
05D4: FFFFFFFF E9A45145 ; 175: char* manifest_GetParam( const char* buf, const char* param_name, int unk );
05D8: FFFFFFFF E1975645 ; 176: int lseek( int file, int offset, int mode );
05DC: FFFFFFFF 0C94064C ;8177: int get_VBUFFER( void );
05E0: FFFFFFFF F7E4D844 ; 178: void SetLampLevel( int level ); //nullsub(void)
05E4: FFFFFFFF F1782445 ; 179: void* List_RemoveAt( LIST* lst, int index );
05E8: FFFFFFFF 0DA11444 ; 17A: PROCESS GetCurrentPID( void );
05EC: FFFFFFFF 29792445 ; 17B: int List_IndexOf( LIST* lst, void* item );
05F0: FFFFFFFF 9C421844 ; 17C: union SIGNAL* alloc( OSBUFSIZE size, SIGSELECT signo );
05F4: FFFFFFFF B8421844 ; 17D: union SIGNAL* receive( const SIGSELECT* sigsel );
05F8: FFFFFFFF A8421844 ; 17E: void send( union SIGNAL** sig, PROCESS to );
05FC: FFFFFFFF F8421844 ; 17F: PROCESS sender( union SIGNAL** sig );
0600: FFFFFFFF C8421844 ; 180: void free_buf( union SIGNAL** sig );
0604: FFFFFFFF 94431844 ; 181: PROCESS create_process( PROCESS_TYPE proc_type, char* name, OSENTRYPOINT* entrypoint, OSADDRESS stack_size, OSPRIORITY priority, OSTIME timeslice, PROCESS pid_block, void* redir_table, OSVECTOR vector, OSUSER user );
0608: FFFFFFFF B4451844 ; 182: void start( PROCESS pid );
060C: FFFFFFFF 64441844 ; 183: int get_ptype( PROCESS pid );
0610: FFFFFFFF B0431844 ; 184: PROCESS current_process( void );
0614: FFFFFFFF E8421844 ; 185: void delay( OSTIME timeout );
0618: FFFFFFFF B0441844 ; 186: OSBOOLEAN hunt( const char* name, OSUSER user, PROCESS* name_, union SIGNAL** hunt_sig );
061C: FFFFFFFF D0441844 ; 187: void kill_proc( PROCESS pid );
;0620: xxxxxxxx yyyyyyyy ; 188:
;0624: xxxxxxxx yyyyyyyy ; 189: union SIGNAL* receive_w_tmo( OSTIME timeout, SIGSELECT* sel );
;0628: xxxxxxxx yyyyyyyy ; 18A:
;062C: xxxxxxxx yyyyyyyy ; 18B: void stop( PROCESS pid );
;0630: xxxxxxxx yyyyyyyy ; 18C: OSBOOLEAN get_mem( PROCESS pid, OSADDRESS from, void* to, OSADDRESS size );
;0634: xxxxxxxx yyyyyyyy ; 18D: OSADDRESS get_envp( PROCESS pid, char* name );
;0638: xxxxxxxx yyyyyyyy ; 18E: OSBOOLEAN set_envp( PROCESS pid, char* name, OSADDRESS value );
;063C: xxxxxxxx yyyyyyyy ; 18F: PROCESS get_bid( PROCESS pid );
;0640: xxxxxxxx yyyyyyyy ; 190: int datetime2unixtime( DATETIME* dt );
;0644: xxxxxxxx yyyyyyyy ; 191:
;0648: xxxxxxxx yyyyyyyy ; 192:
;064C: xxxxxxxx yyyyyyyy ; 193:
;0650: xxxxxxxx yyyyyyyy ; 194:
;0654: xxxxxxxx yyyyyyyy ; 195:
;0658: xxxxxxxx yyyyyyyy ; 196:
;065C: xxxxxxxx yyyyyyyy ; 197:
;0660: xxxxxxxx yyyyyyyy ; 198:
;0664: xxxxxxxx yyyyyyyy ; 199:
;0668: xxxxxxxx yyyyyyyy ; 19A:
;066C: xxxxxxxx yyyyyyyy ; 19B:
;0670: xxxxxxxx yyyyyyyy ; 19C:
;0674: xxxxxxxx yyyyyyyy ; 19D:
;0678: xxxxxxxx yyyyyyyy ; 19E:
;067C: xxxxxxxx yyyyyyyy ; 19F:
0680: FFFFFFFF 7985DF44 ; 1A0: char* strcpy( char* dest, const char* source );
;0684: xxxxxxxx yyyyyyyy ; 1A1:
;0688: xxxxxxxx yyyyyyyy ; 1A2:
;068C: xxxxxxxx yyyyyyyy ; 1A3:
;0690: xxxxxxxx yyyyyyyy ; 1A4:
;0694: xxxxxxxx yyyyyyyy ; 1A5:
0698: FFFFFFFF 89055F45 ; 1A6: char* UIEventName( int event );
069C: FFFFFFFF 2204264C ;81A7: char* MissedEvents( void );
06A0: FFFFFFFF 61544E45 ; 1A8: void UI_Event( int event );
06A4: FFFFFFFF 6D544E45 ; 1A9: void UI_Event_wData( int event, void* message, void (*free_proc)( void* ) );
06A8: FFFFFFFF 91544E45 ; 1AA: void UI_Event_toBookID( int event, int BookID );
06AC: FFFFFFFF A1544E45 ; 1AB: void UI_Event_toBookIDwData( int event, int BookID, void* message, void (*free_proc)( void* ) );
06B0: FFFFFFFF 197C2445 ; 1AC: int List_Find( LIST* lst, void* itemtofind, LISTFINDCALLBACK cmp_proc );
06B4: FFFFFFFF F97A2445 ; 1AD: void* List_Get( LIST* lst, int index );
06B8: FFFFFFFF 8D8FDF44 ; 1AE: wchar_t* wstrrchr( const wchar_t* wstr, wchar_t wchar );
06BC: FFFFFFFF ADB02545 ; 1AF: void BookObj_CallSubroutine( BOOK* book, BOOK_SUBROUTINE* subr );
06C0: FFFFFFFF 79792445 ; 1B0: int List_InsertLast( LIST* lst, void* item );
06C4: FFFFFFFF 2539DA44 ; 1B1: void debug_printf( const char* fmt, ... );
06C8: FFFFFFFF B90C1145 ; 1B2: int PlayFile( const wchar_t* path, const wchar_t* fname );
;06CC: xxxxxxxx yyyyyyyy ; 1B3:
06D0: FFFFFFFF A90B6045 ; 1B4: int REQUEST_PROFILE_GETACTIVEPROFILE( const int* sync, int* level );
;06D4: xxxxxxxx yyyyyyyy ; 1B5: int Profile_SetActive( int NUMprof, int set_in_gdfs_flag );
;06D8: xxxxxxxx yyyyyyyy ; 1B6:
06DC: FFFFFFFF 6D501145 ; 1B7: int isKeylocked( void );
06E0: FFFFFFFF E5B13F45 ; 1B8: int IsMediaPlayerVideoBook( BOOK* bk );
;06E4: xxxxxxxx yyyyyyyy ; 1B9:
;06E8: xxxxxxxx yyyyyyyy ; 1BA:
;06EC: xxxxxxxx yyyyyyyy ; 1BB:
06F0: FFFFFFFF 75995445 ; 1BC: int REQUEST_DATEFORMAT_GET( const int* sync, char* DateFormat );
06F4: FFFFFFFF 159A5445 ; 1BD: int REQUEST_TIMEFORMAT_GET( const int* sync, char* TimeFormat );
06F8: FFFFFFFF 81D91045 ; 1BE: int Date2ID( DATE*, int TimeFormat, int );
06FC: FFFFFFFF 99D81045 ; 1BF: int Time2ID( TIME*, char TimeFormat, int isSec );
0700: FFFFFFFF 0DD21245 ; 1C0: GUI_LIST* CreateListMenu( BOOK*, int display );
0704: FFFFFFFF 35D41245 ; 1C1: void ListMenu_SetItemCount( GUI_LIST*, int item_count );
0708: FFFFFFFF 306C254C ;81C2: LIST** ROOT_APP( void );
070C: FFFFFFFF 35881545 ; 1C3: void GUIObject_SoftKeys_SetInfoText( GUI*, u16 actionID, TEXTID );
0710: FFFFFFFF 258A1545 ; 1C4: void GUIObject_SoftKeys_SetItemAsSubItem( GUI*, u16 actionID, int subitem );
0714: FFFFFFFF B9745F45 ; 1C5: int REQUEST_SYSTEM_SHUTDOWN( void );
0718: FFFFFFFF C9745F45 ; 1C6: int REQUEST_SYSTEM_RESTART( void );
071C: FFFFFFFF B9881545 ; 1C7: void GUIObject_SoftKeys_SetTexts( GUI*, u16 actionID, TEXTID short_text, TEXTID full_text );
0720: FFFFFFFF C5195F45 ; 1C8: int IsRightNowBook( BOOK* book );
0724: FFFFFFFF C9715F45 ; 1C9: int IsVolumeControllerBook( BOOK* book );
0728: FFFFFFFF 31051145 ; 1CA: GUI_TABMENUBAR* CreateTabMenuBar( BOOK* book );
072C: FFFFFFFF 41061145 ; 1CB: void TabMenuBar_SetTabCount( GUI_TABMENUBAR*, int count );
0730: FFFFFFFF 25071145 ; 1CC: void TabMenuBar_SetTabGui( GUI_TABMENUBAR*, int tab, GUI* );
0734: FFFFFFFF 01081145 ; 1CD: void TabMenuBar_SetTabIcon( GUI_TABMENUBAR*, int tab, IMAGEID, int for_state );
0738: FFFFFFFF BD091545 ; 1CE: GUI* GUIObject_Destroy( GUI* );
073C: FFFFFFFF 250E1545 ; 1CF: void GUIInput_SetIcon( GUI*, IMAGEID );
0740: FFFFFFFF 15301245 ; 1D0: int StringInput_GetStringAndLen( GUI*, wchar_t**, u16* );
0744: FFFFFFFF 006D254C ;81D1: PAudioControl* GetAudioControlPtr( void );
0748: FFFFFFFF 15312E45 ; 1D2: int AudioControl_Vibrate( PAudioControl pIAudioControl, int vibratime, int pausetime, int totaltime );
074C: FFFFFFFF E9A85645 ; 1D3: int GetVolumeSize( wchar_t* root_folder, VOLUMESIZE* );
0750: FFFFFFFF 49ED1245 ; 1D4: GUI_NOFMANY* CreateNOfMany( BOOK* book );
0754: FFFFFFFF 89EF1245 ; 1D5: void NOfMany_SetTexts( GUI_NOFMANY*, TEXTID* strids, int items_count );
0758: FFFFFFFF F5EE1245 ; 1D6: void NOfMany_SetChecked( GUI_NOFMANY*, u16* checked_table, int items_count );
075C: FFFFFFFF B5EE1245 ; 1D7: void NOfMany_SetCursor( GUI_NOFMANY*, int item );
0760: FFFFFFFF 1DEF1245 ; 1D8: int NOfMany_GetCheckedCount( GUI_NOFMANY* );
0764: FFFFFFFF 09EF1245 ; 1D9: int NOfMany_GetChecked( GUI_NOFMANY*, u16* buffer );
0768: FFFFFFFF 81EF1245 ; 1DA: void NOfMany_SetOnMessage( GUI_NOFMANY*, int (*proc)( GUI_MESSAGE* ) );
;076C: xxxxxxxx yyyyyyyy ; 1DB:
;0770: xxxxxxxx yyyyyyyy ; 1DC:
;0774: xxxxxxxx yyyyyyyy ; 1DD:
;0778: xxxxxxxx yyyyyyyy ; 1DE:
077C: FFFFFFFF 090E1145 ; 1DF: PAudioControl AudioControl_Init( void );
0780: FFFFFFFF 7DF41245 ; 1E0: void OneOfMany_SetFocused( GUI_ONEOFMANY*, int item );
0784: FFFFFFFF E9F41245 ; 1E1: void OneOfMany_SetOnMessage( GUI_ONEOFMANY*, int (*proc)( GUI_MESSAGE* ) );
0788: FFFFFFFF 15561145 ; 1E2: GUI_FEEDBACK* CreateMonitorFeedback( TEXTID, BOOK*, void (*onbusy)(BOOK*), void (*onedit)(BOOK*), void (*ondelete)(BOOK*) );
078C: FFFFFFFF B1561145 ; 1E3: void Feedback_SetText( GUI_FEEDBACK*, TEXTID );
0790: FFFFFFFF A154D644 ; 1E4: int GetBatteryState( void* unused, BATT* );
0794: FFFFFFFF 71E81445 ; 1E5: GC* get_DisplayGC( void );
0798: FFFFFFFF 69DF2B45 ; 1E6: void DispObject_GetRect( DISP_OBJ*, RECT* );
079C: FFFFFFFF 85EE1445 ; 1E7: void GC_GetRect( GC* gc, RECT* );
07A0: FFFFFFFF 99F11445 ; 1E8: int GC_GetXX( GC* gc );
07A4: FFFFFFFF 8DF11445 ; 1E9: void GC_SetXX( GC* gc, int );
07A8: FFFFFFFF 31EE1445 ; 1EA: void GC_ValidateRect( GC* gc, RECT* );
07AC: FFFFFFFF C1B52545 ; 1EB: void BookObj_AddGUIObject( BOOK* book, GUI* );
07B0: FFFFFFFF 811D2C45 ; 1EC: void DrawRect( int x1, int y1, int x2, int y2, int pen_color, int brush_color );
07B4: FFFFFFFF 89212C45 ; 1ED: void DrawString( TEXTID, int align, int x1, int y1, int x2, int y2, int unk, int unk1, int pen_color, int brush_color );
07B8: FFFFFFFF C13A2645 ; 1EE: void XGUIList_AddGUIObject( XGUILIST* xguilist, GUI* );
07BC: FFFFFFFF CDDD2B45 ; 1EF: void DispObject_InvalidateRect( DISP_OBJ*, RECT* );
07C0: FFFFFFFF F1081545 ; 1F0: int GUIObject_Create( GUI*, void (*GuiDestroy)( GUI* ), void (*DispDescCreate)( DISP_DESC* ), BOOK*, void (*DispObjCallBack)( DISP_OBJ*, void* msg, GUI* ), int display, int size_of_gui );
07C4: FFFFFFFF C92C2C45 ; 1F1: int SetFont( int );
07C8: FFFFFFFF 3C9A254C ;81F2: DISP_OBJ** StatusRow_p( void );
07CC: FFFFFFFF 39544E45 ; 1F3: int root_list_get_session_count( void );
07D0: FFFFFFFF 4D544E45 ; 1F4: UI_APP_SESSION* root_list_get_session( int num_session );
07D4: FFFFFFFF 194D4E45 ; 1F5: BOOK* SESSION_GetTopBook( UI_APP_SESSION* );
07D8: FFFFFFFF B9591145 ; 1F6: int MainInput_getVisible( GUI* );
07DC: FFFFFFFF C5591145 ; 1F7: int MainInput_strlen( GUI* );
07E0: FFFFFFFF D9591145 ; 1F8: char* MainInput_getPNUM( GUI* );
07E4: FFFFFFFF E5591145 ; 1F9: int MainInput_isPlus( GUI* );
07E8: FFFFFFFF 71B82545 ; 1FA: int BookObj_GetBookID( BOOK* book );
07EC: FFFFFFFF 018FDF44 ; 1FB: int wstrncmp( const wchar_t*, const wchar_t*, int );
07F0: FFFFFFFF F9FC2B45 ; 1FC: int DispObject_GetAbsoluteXPos( DISP_OBJ* );
07F4: FFFFFFFF 31FD2B45 ; 1FD: int DispObject_GetAbsoluteYPos( DISP_OBJ* );
;07F8: xxxxxxxx yyyyyyyy ; 1FE:
07FC: FFFFFFFF 6D6D4E45 ; 1FF: int GetThemeColor( int, int );
0800: FFFFFFFF 7D036045 ; 200: int REQUEST_SETTING_SILENCE_SET( const int* sync, u16 profile, u16 value );
0804: FFFFFFFF 21036045 ; 201: int REQUEST_SETTING_SILENCE_GET( const int* sync, u16 profile, char* silence_mode );
0808: FFFFFFFF 5D681D45 ; 202: void VCALL_Init( void* vc );
080C: FFFFFFFF 51691D45 ; 203: void VCALL_SetName( void* vc, wchar_t* name, unsigned short name_len );
0810: FFFFFFFF B5691D45 ; 204: void VCALL_SetNameIcon( void* vc, IMAGEID );
0814: FFFFFFFF 71691D45 ; 205: void VCALL_SetNumber( void* vc, wchar_t* number, unsigned short num_len );
0818: FFFFFFFF 99691D45 ; 206: void VCALL_SetHZ1( void* vc, int, u16 );
081C: FFFFFFFF A5691D45 ; 207: void VCALL_SetHZ2( void* vc, u16 );
0820: FFFFFFFF 95601D45 ; 208: void MakeVoiceCall( int SessioID, void* vc, int flag );
;0824: xxxxxxxx yyyyyyyy ; 209:
0828: FFFFFFFF 2D895645 ; 20A: void FileDelete( wchar_t* path, wchar_t* filename, int* error );
082C: FFFFFFFF E50B1545 ; 20B: void GUIObject_SetFocus( GUI*, int );
0830: FFFFFFFF 6D824245 ; 20C: int MSG_SendMessage_CreateMessage( int, void* );
0834: FFFFFFFF 7D874245 ; 20D: int MSG_SendMessage_DestroyMessage( void* );
0838: FFFFFFFF CD834245 ; 20E: int MSG_SendMessage_AddRecipient( void*, wchar_t*, wchar_t*, int, int );
083C: FFFFFFFF CD864245 ; 20F: int MSG_SendMessage_Start( int, void*, int );
0840: FFFFFFFF 80924F44 ;8210: void* get_APP_DESC_TABLE( void );
;0844: xxxxxxxx yyyyyyyy ; 211:
0848: FFFFFFFF 112D1E45 ; 212: int AB_POSITIONNBR_GET( void* ab_name, char*, u16*, void* ab_num );
084C: FFFFFFFF B12B1E45 ; 213: TEXTID AB_NAME_ITEM2StrID( AB_STR_ITEM* ab_name );
0850: FFFFFFFF 052C1E45 ; 214: TEXTID AB_NUM_ITEM2StrID( AB_NUM_ITEM* ab_num_item );
0854: FFFFFFFF 35DF5F45 ; 215: int GetABRecNum( AB_GET_STRUCT* ); //nullsub(void)
0858: FFFFFFFF 54194D44 ;8216: AB_ITEM_DESC* get_AB_ITEMS_DESC( void );
085C: FFFFFFFF A1651F45 ; 217: GUI* SBY_GetMainInput( BOOK* StandBy ); // !!!!! не настоящий !!!!!!
0860: FFFFFFFF A9651F45 ; 218: GUI* SBY_GetStatusIndication( BOOK* StandBy ); // !!!!! не настоящий !!!!!!
0864: FFFFFFFF 89C05445 ; 219: int REQUEST_PHONEBOOK_ACCESSSTATUS_TOTAL_GET( const int* sync, int* );
0868: FFFFFFFF 40C2094C ;821A: PROCESS* PID_MMI( void );
;086C: xxxxxxxx yyyyyyyy ; 21B:
;0870: xxxxxxxx yyyyyyyy ; 21C: GUI* DispObject_GetGUI( DISP_OBJ* );
0874: FFFFFFFF 31D72B45 ; 21D: DISP_OBJ* Display_GetFocusedDispObject( int display );
0878: FFFFFFFF 61DC2B45 ; 21E: char DispObject_GetVisible( DISP_OBJ* );
087C: FFFFFFFF C99A2D45 ; 21F: DISP_DESC* DispObject_GetDESC( DISP_OBJ* ); // !!!!! не настоящий !!!!!!
0880: FFFFFFFF 5DD02B45 ; 220: void DISP_DESC_SetName( DISP_DESC*, const char* name );
0884: FFFFFFFF 01FB2B45 ; 221: char* DispObject_GetName( DISP_OBJ* );
0888: FFFFFFFF 6DD02B45 ; 222: void DISP_DESC_SetSize( DISP_DESC*, u16 size );
;088C: xxxxxxxx yyyyyyyy ; 223: u16 DISP_DESC_GetSize( DISP_OBJ* );
0890: FFFFFFFF 71D02B45 ; 224: void DISP_DESC_SetOnCreate( DISP_DESC*, DISP_OBJ_ONCREATE_METHOD );
0894: FFFFFFFF A5D22B45 ; 225: DISP_OBJ_ONCREATE_METHOD DispObject_GetOnCreate( DISP_OBJ* );
0898: FFFFFFFF 75D02B45 ; 226: void DISP_DESC_SetOnClose( DISP_DESC*, DISP_OBJ_ONCLOSE_METHOD );
089C: FFFFFFFF C5D22B45 ; 227: DISP_OBJ_ONCLOSE_METHOD DispObject_GetOnClose( DISP_OBJ* );
08A0: FFFFFFFF 79D02B45 ; 228: void DISP_DESC_SetOnRedraw( DISP_DESC*, DISP_OBJ_ONREDRAW_METHOD );
08A4: FFFFFFFF E5D22B45 ; 229: DISP_OBJ_ONREDRAW_METHOD DispObject_GetOnRedraw( DISP_OBJ* );
08A8: FFFFFFFF 81D02B45 ; 22A: void DISP_DESC_SetOnKey( DISP_DESC*, DISP_OBJ_ONKEY_METHOD );
08AC: FFFFFFFF 25D32B45 ; 22B: DISP_OBJ_ONKEY_METHOD DispObject_GetOnKey( DISP_OBJ* );
;08B0: xxxxxxxx yyyyyyyy ; 22C: void DISP_DESC_SetOnRefresh( DISP_DESC*, DISP_OBJ_METHOD );
;08B4: xxxxxxxx yyyyyyyy ; 22D: DISP_OBJ_METHOD DispObject_GetonRefresh( DISP_OBJ* );
;08B8: xxxxxxxx yyyyyyyy ; 22E: void DISP_DESC_SetMethod04( DISP_DESC*, void (*)( void* ) );
;08BC: xxxxxxxx yyyyyyyy ; 22F: DISP_OBJ_METHOD DispObject_GetMethod04( DISP_OBJ* );
;08C0: xxxxxxxx yyyyyyyy ; 230: void DISP_DESC_SetMethod05( DISP_DESC*, void (*)( void* ) );
;08C4: xxxxxxxx yyyyyyyy ; 231: DISP_OBJ_METHOD DispObject_GetMethod05( DISP_OBJ* );
08C8: FFFFFFFF 85D02B45 ; 232: void DISP_DESC_SetMethod06( DISP_DESC*, DISP_OBJ_METHOD );
08CC: FFFFFFFF 45D32B45 ; 233: DISP_OBJ_METHOD DispObject_GetMethod06( DISP_OBJ* );
;08D0: xxxxxxxx yyyyyyyy ; 234: void DISP_DESC_SetMethod07( DISP_DESC*, void (*)( void* ) );
;08D4: xxxxxxxx yyyyyyyy ; 235: DISP_OBJ_METHOD DispObject_GetMethod07( DISP_OBJ* );
08D8: FFFFFFFF 8DD02B45 ; 236: void DISP_DESC_SetOnLayout( DISP_DESC*, DISP_OBJ_METHOD );
08DC: FFFFFFFF 85D32B45 ; 237: DISP_OBJ_METHOD DispObject_GetOnLayout( DISP_OBJ* );
;08E0: xxxxxxxx yyyyyyyy ; 238: void DISP_DESC_SetOnConfig( DISP_DESC*, void (*)( void* ) );
;08E4: xxxxxxxx yyyyyyyy ; 239: DISP_OBJ_METHOD DispObject_GetOnConfig( DISP_OBJ* );
;08E8: xxxxxxxx yyyyyyyy ; 23A: void DISP_DESC_SetMethod0A( DISP_DESC*, void (*)( void* ) );
;08EC: xxxxxxxx yyyyyyyy ; 23B: DISP_OBJ_METHOD DispObject_GetMethod0A( DISP_OBJ* );
;08F0: xxxxxxxx yyyyyyyy ; 23C: void DISP_DESC_SetMethod0B( DISP_DESC*, void (*)( void* ) );
;08F4: xxxxxxxx yyyyyyyy ; 23D: DISP_OBJ_METHOD DispObject_GetMethod0B( DISP_OBJ* );
;08F8: xxxxxxxx yyyyyyyy ; 23E: void DISP_DESC_SetMethod0C( DISP_DESC*, void (*)( void* ) );
;08FC: xxxxxxxx yyyyyyyy ; 23F: DISP_OBJ_METHOD DispObject_GetMethod0C( DISP_OBJ* );
0900: FFFFFFFF 454B5F45 ; 240: void JavaSession_Manager( int cmd );
0904: FFFFFFFF 8D4A5F45 ; 241: TEXTID JavaSession_GetName( void );
0908: FFFFFFFF 159B2B45 ; 242: TEXTID TextID_Copy( TEXTID );
090C: FFFFFFFF 15B82545 ; 243: UI_APP_SESSION* BookObj_GetSession( BOOK* book );
0910: FFFFFFFF D9DF1245 ; 244: void GUIonMessage_SetNumberOfSubItems( GUI_MESSAGE* msg, int unk, int num_sub_items );
0914: FFFFFFFF 65E01245 ; 245: void GUIonMessage_SubItem_SetText( GUI_MESSAGE* msg, TEXTID );
0918: FFFFFFFF 55E01245 ; 246: int GUIonMessage_SubItem_GetCreatedParentIndex( GUI_MESSAGE* msg );
;091C: xxxxxxxx yyyyyyyy ; 247: void GoMusic( void );
;0920: xxxxxxxx yyyyyyyy ; 248:
;0924: xxxxxxxx yyyyyyyy ; 249:
0928: FFFFFFFF C90C1145 ; 24A: int PlayFileV( const wchar_t* path, const wchar_t* fname, int vol );
092C: FFFFFFFF F1274145 ; 24B: int GetSilent( void );
;0930: xxxxxxxx yyyyyyyy ; 24C: int GetVibrator( int ignorevibrator, int ignoresilent );
;0934: xxxxxxxx yyyyyyyy ; 24D: int GetAudioSettings( int what, char* retvalue );
0938: FFFFFFFF C173CF44 ; 24E: int GetChipID( void );
;093C: xxxxxxxx yyyyyyyy ; 24F:
;0940: xxxxxxxx yyyyyyyy ; 250:
;0944: xxxxxxxx yyyyyyyy ; 251:
0948: FFFFFFFF 45E01245 ; 252: int GUIonMessage_SubItem_GetCreatedIndex( GUI_MESSAGE* msg );
094C: FFFFFFFF 35E01245 ; 253: int GUIonMessage_SubItem_GetSelectedParentIndex( GUI_MESSAGE* msg );
0950: FFFFFFFF FD655645 ; 254: void DestroyDirHandle( DIR_HANDLE* handle );
0954: FFFFFFFF 702F4E44 ;8255: DB_EXT* LastExtDB( void );
0958: FFFFFFFF BD785745 ; 256: void GetOtherExtMethods( FILESUBROUTINE** );
095C: FFFFFFFF A97F4E45 ; 257: int MessageBox( TEXTID header_text, TEXTID message_text, IMAGEID, int style, int time, BOOK* book );
0960: FFFFFFFF C5BE4F45 ; 258: int Display_GetHeight( int display );
0964: FFFFFFFF D5BE4F45 ; 259: int Display_GetWidth( int display );
0968: FFFFFFFF E10B1145 ; 25A: void PlaySystemSound( int SndNumber );
;096C: xxxxxxxx yyyyyyyy ; 25B:
;0970: xxxxxxxx yyyyyyyy ; 25C:
0974: FFFFFFFF 1D061145 ; 25D: int TabMenuBar_GetFocusedTab( GUI_TABMENUBAR* );
0978: FFFFFFFF F5051145 ; 25E: void TabMenuBar_SetFocusedTab( GUI_TABMENUBAR*, int tab_num );
097C: FFFFFFFF 99F01445 ; 25F: int GC_GetPenColor( GC* gc );
0980: FFFFFFFF 59F01445 ; 260: void GC_SetPenColor( GC* gc, int pen_color );
0984: FFFFFFFF D7EC1445 ; 261: void GC_SetPixel( GC* gc, int x1, int y1, int color );
0988: FFFFFFFF A9FA1445 ; 262: void GC_DrawLine( GC* gc, int x1, int y1, int x2, int y2 );
098C: FFFFFFFF 3DFC1445 ; 263: void GC_DrawFRect( GC* gc, int color, int x1, int y1, int x2, int y2 );
0990: FFFFFFFF 55ED1445 ; 264: int GC_WritePixels( GC* gc, int x1, int y1, int x2, int y2, int* bmp );
;0994: xxxxxxxx yyyyyyyy ; 265: png_structp png_create_read_struct_2( png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn, png_voidp mem_ptr, png_malloc_ptr malloc_fn, png_free_ptr free_fn );
;0998: xxxxxxxx yyyyyyyy ; 266: void png_destroy_read_struct( png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr );
;099C: xxxxxxxx yyyyyyyy ; 267: png_infop png_create_info_struct( png_structp png_ptr );
;09A0: xxxxxxxx yyyyyyyy ; 268: void png_destroy_info_struct( png_structp png_ptr, png_infopp info_ptr_ptr );
;09A4: xxxxxxxx yyyyyyyy ; 269: void png_set_progressive_read_fn( png_structp png_ptr, png_voidp progressive_ptr, png_progressive_info_ptr info_fn, png_progressive_row_ptr row_fn, png_progressive_end_ptr end_fn );
;09A8: xxxxxxxx yyyyyyyy ; 26A: void png_process_data( png_structp png_ptr, png_infop info_ptr, png_bytep buffer, png_size_t buffer_size );
;09AC: xxxxxxxx yyyyyyyy ; 26B: void png_read_update_info( png_structp png_ptr, png_infop info_ptr );
;09B0: xxxxxxxx yyyyyyyy ; 26C: png_voidp png_get_progressive_ptr( png_structp png_ptr );
;09B4: xxxxxxxx yyyyyyyy ; 26D: png_uint_32 png_get_IHDR( png_structp png_ptr, png_infop info_ptr, png_uint_32* width, png_uint_32* height, int* bit_depth, int* color_type, int* interlace_method, int* compression_method, int* filter_method );
;09B8: xxxxxxxx yyyyyyyy ; 26E: void png_set_strip_16( png_structp png_ptr );
;09BC: xxxxxxxx yyyyyyyy ; 26F: void png_set_gray_1_2_4_to_8( png_structp png_ptr );
;09C0: xxxxxxxx yyyyyyyy ; 270: void png_set_gray_to_rgb( png_structp png_ptr );
;09C4: xxxxxxxx yyyyyyyy ; 271: png_uint_32 png_get_valid( png_structp png_ptr, png_infop info_ptr, png_uint_32 flag );
;09C8: xxxxxxxx yyyyyyyy ; 272: void png_set_tRNS_to_alpha( png_structp png_ptr );
;09CC: xxxxxxxx yyyyyyyy ; 273: void png_set_filler( png_structp png_ptr, png_uint_32 filler, int flags );
;09D0: xxxxxxxx yyyyyyyy ; 274: void png_set_palette_to_rgb( png_structp png_ptr );
;09D4: xxxxxxxx yyyyyyyy ; 275: png_uint_32 png_get_rowbytes( png_structp png_ptr, png_infop info_ptr );
;09D8: xxxxxxxx yyyyyyyy ; 276: void png_progressive_combine_row( png_structp png_ptr, png_bytep old_row, png_bytep new_row );
;09DC: xxxxxxxx yyyyyyyy ; 277: int png_sig_cmp( png_bytep sig, png_size_t start, png_size_t num_to_check );
;09E0: xxxxxxxx yyyyyyyy ; 278: int setjmp( jmp_buf jmpbuf );
;09E4: xxxxxxxx yyyyyyyy ; 279: void longjmp( jmp_buf, int );
;09E8: xxxxxxxx yyyyyyyy ; 27A: int inflateInit2_( z_streamp strm, int windowBits, const char* version, int stream_size );
;09EC: xxxxxxxx yyyyyyyy ; 27B: int inflate( z_streamp strm, int flush );
;09F0: xxxxxxxx yyyyyyyy ; 27C: int inflateEnd( z_streamp strm );
;09F4: xxxxxxxx yyyyyyyy ; 27D: int memcmp( const void* m1, const void* m2, int n );
;09F8: xxxxxxxx yyyyyyyy ; 27E: int strncmp( const char* s1, const char* s2, int len );
;09FC: xxxxxxxx yyyyyyyy ; 27F: char* strncpy( char* dest, const char* source, int maxlen );
;0A00: xxxxxxxx yyyyyyyy ; 280: char* strcat( char* dest, const char* src );
0A04: FFFFFFFF 410D1545 ; 281: void GUIObject_SetTitleType( GUI*, int type );
0A08: FFFFFFFF E5DF1245 ; 282: void GUIonMessage_SetItemDisabled( GUI_MESSAGE* msg, BOOL );
0A0C: FFFFFFFF 891B5645 ; 283: int REQUEST_IMAGEHANDLER_INTERNAL_REGISTER( const int* sync, u16 ImageHandler, wchar_t* path, wchar_t* fname, int unk, IMAGEID*, char* error );
0A10: FFFFFFFF 1D1C5645 ; 284: int REQUEST_IMAGEHANDLER_INTERNAL_UNREGISTER( const int* sync, u16 ImageHandler, u16*, u16*, IMAGEID, int unk_1, char* error );
;0A14: xxxxxxxx yyyyyyyy ;8285: SURFACE** get_Surfaces( void );
0A18: FFFFFFFF C9C92D45 ; 286: int iconidname2id( const wchar_t* idname, int maxnamelen, int* id );
0A1C: FFFFFFFF 3D131B45 ; 287: int textidname2id( const wchar_t* idname, int maxnamelen, TEXTID* id );
;0A20: xxxxxxxx yyyyyyyy ; 288: void ListMenu_SetNoItemText( GUI_LIST*, TEXTID str );
;0A24: xxxxxxxx yyyyyyyy ; 289:
0A28: FFFFFFFF 5D8D3F45 ; 28A: int IsFmRadioBook( BOOK* bk );
;0A2C: xxxxxxxx yyyyyyyy ; 28B: int IsAudioPlayerBook( BOOK* bk);
;0A30: xxxxxxxx yyyyyyyy ; 28C: void PlayerControl( BOOK* AudioPlayerBook, int );
;0A34: xxxxxxxx yyyyyyyy ; 28D: void SwitchRadioStationFromList( BOOK* FmRadioBook, int );
;0A38: xxxxxxxx yyyyyyyy ; 28E: void Shortcut_Run( wchar_t* shortcut_name );
;0A3C: xxxxxxxx yyyyyyyy ; 28F: int mkdir( const wchar_t* path );
;0A40: xxxxxxxx yyyyyyyy ; 290: int rmdir( const wchar_t* path, int zero );
;0A44: xxxxxxxx yyyyyyyy ; 291: int chmod( const wchar_t* path, const wchar_t* fname, int amode );
;0A48: xxxxxxxx yyyyyyyy ; 292: int rename( const wchar_t* oldpath, const wchar_t* oldfname, const wchar_t* newpath, const wchar_t* newfname, int zero );
;0A4C: xxxxxxxx yyyyyyyy ; 293: int GetImageWidth( IMAGEID );
;0A50: xxxxxxxx yyyyyyyy ; 294: int GetImageHeight( IMAGEID );
;0A54: xxxxxxxx yyyyyyyy ; 295: void* CallID_GetCallStatusDesc( int CallID );
;0A58: xxxxxxxx yyyyyyyy ; 296: wchar_t* CallStatusDesc_GetName( void* CallStatusDesc );
;0A5C: xxxxxxxx yyyyyyyy ; 297: void List_DestroyElements( LIST* lst, int (*cmp_proc)( void* item ), void (*free_proc)( void* item ) );
;0A60: xxxxxxxx yyyyyyyy ; 298: char* strstr( const char* str1, const char* str2 );
;0A64: xxxxxxxx yyyyyyyy ; 299: int GPRS_GetLastSessionInfo( int, GPRS_SESSION_INFO* );
;0A68: xxxxxxxx yyyyyyyy ; 29A: int wstrcmpni( const wchar_t* wstr1, const wchar_t* wstr2, int len );
;0A6C: xxxxxxxx yyyyyyyy ; 29B: int wtoi( const wchar_t* wstr, int len, int* dest );
;0A70: xxxxxxxx yyyyyyyy ; 29C: void DATE_GetWeekDay( DATE*, char* dest );
;0A74: xxxxxxxx yyyyyyyy ; 29D: void Cale_GetSettings( int setID, void* );
;0A78: xxxxxxxx yyyyyyyy ; 29E: wchar_t* wstrwstr( const wchar_t* wstr1, const wchar_t* wstr2 );
;0A7C: xxxxxxxx yyyyyyyy ; 29F: int wstrcmpi( const wchar_t* ws1, const wchar_t* ws2 );
;0A80: xxxxxxxx yyyyyyyy ; 2A0: wchar_t* wstrchr( const wchar_t* source, wchar_t chr );
;0A84: xxxxxxxx yyyyyyyy ; 2A1: void GUIObject_SoftKeys_Hide( GUI* );
;0A88: xxxxxxxx yyyyyyyy ; 2A2: void GUIObject_SoftKeys_Show( GUI* );
;0A8C: xxxxxxxx yyyyyyyy ; 2A3: DISP_OBJ* DispObject_SoftKeys_Get( void );
;0A90: xxxxxxxx yyyyyyyy ; 2A4: int StandbyBackground_SetImage( int type, int, int, const wchar_t* path, const wchar_t* fname, int );
;0A94: xxxxxxxx yyyyyyyy ; 2A5: GUI* CreateYesNoQuestionVA( int zero, ... );
;0A98: xxxxxxxx yyyyyyyy ; 2A6: void ListMenu_SetItemSecondLineText( GUI_LIST*, int elem_num, TEXTID );
;0A9C: xxxxxxxx yyyyyyyy ; 2A7: void _REQUEST_OAF_START_APPLICATION( const int* sync, int __zero, MIDP_DESC*, int ___zero );
;0AA0: xxxxxxxx yyyyyyyy ; 2A8: wchar_t* FSX_GetInvalidChar( wchar_t* name );
;0AA4: xxxxxxxx yyyyyyyy ; 2A9: void DataBrowserDesc_SetFoldersNumber( void* DataBrowserDesc, int state );
;0AA8: xxxxxxxx yyyyyyyy ; 2AA: void DataBrowserDesc_SetActions( void* DataBrowserDesc, char* actions );
;0AAC: xxxxxxxx yyyyyyyy ; 2AB: void DataBrowserDesc_SetSelectAction( void* DataBrowserDesc, int state );
;0AB0: xxxxxxxx yyyyyyyy ; 2AC: void DataBrowserDesc_SetSelectActionOnFolders( void* DataBrowserDesc, int state );
;0AB4: xxxxxxxx yyyyyyyy ; 2AD: void DataBrowserDesc_SetBookID( void* DataBrowserDesc, int BookID );
;0AB8: xxxxxxxx yyyyyyyy ; 2AE: void DataBrowserDesc_SetItemFilter( void* DataBrowserDesc, DB_FILE_FILTER );
;0ABC: xxxxxxxx yyyyyyyy ; 2AF: void DataBrowserDesc_SetOption( void* DataBrowserDesc, char* option );
;0AC0: xxxxxxxx yyyyyyyy ; 2B0: void DataBrowserDesc_SetOpenEmptyFolder( void* DataBrowserDesc, int state );
;0AC4: xxxxxxxx yyyyyyyy ; 2B1: void DataBrowserDesc_SetFileExtList( void* DataBrowserDesc, const wchar_t* ExtList );
;0AC8: xxxxxxxx yyyyyyyy ; 2B2: void FSX_RemoveIllegalSymbolsName( FILEITEM* );
;0ACC: xxxxxxxx yyyyyyyy ; 2B3: FILEITEM* FILEITEM_Create( void );
;0AD0: xxxxxxxx yyyyyyyy ; 2B4: void FILEITEM_Destroy( FILEITEM* );
;0AD4: xxxxxxxx yyyyyyyy ; 2B5: GUI* CreateDateInputVA( int zero, ... );
;0AD8: xxxxxxxx yyyyyyyy ; 2B6: GUI* CreateTimeInputVA( int zero, ... );
;0ADC: xxxxxxxx yyyyyyyy ; 2B7: void StringInput_SetCursorPosition( GUI*, u16 curs_pos, char unk );
;0AE0: xxxxxxxx yyyyyyyy ; 2B8: void BookObj_CallPage( BOOK* book, const PAGE_DESC* page );
;0AE4: xxxxxxxx yyyyyyyy ; 2B9: unsigned int DateInput_GetDateInt( GUI* );
;0AE8: xxxxxxxx yyyyyyyy ; 2BA: unsigned int TimeInput_GetTimeInt( GUI* );
;0AEC: xxxxxxxx yyyyyyyy ;82BB: FONT_DESC* GetFontDesc( void );
;0AF0: xxxxxxxx yyyyyyyy ;82BC: int* GetFontCount( void );
;0AF4: xxxxxxxx yyyyyyyy ; 2BD: int GC_GetBrushColor( GC* gc );
;0AF8: xxxxxxxx yyyyyyyy ; 2BE: void GC_SetBrushColor( GC* gc, int brush_color );
;0AFC: xxxxxxxx yyyyyyyy ; 2BF: void GC_DrawRoundRect( GC* gc, RECT*, int arcWidth, int arcHeight, int border_flag, int fill_flag );
;0B00: xxxxxxxx yyyyyyyy ; 2C0: BOOK* MenuBook_Desktop( int mode, int BookID );
;0B04: xxxxxxxx yyyyyyyy ; 2C1: wchar_t* MenuBook_Desktop_GetSelectedItemID( BOOK* MenuBook_Desktop );
;0B08: xxxxxxxx yyyyyyyy ; 2C2: void BookObj_SoftKeys_SetAction( BOOK* book, int actionID, SKACTIONPROC proc );
;0B0C: xxxxxxxx yyyyyyyy ; 2C3: void BookObj_SoftKeys_SetText( BOOK* book, int actionID, TEXTID );
;0B10: xxxxxxxx yyyyyyyy ; 2C4: BOOK* FindBookByID( int BookID );
;0B14: xxxxxxxx yyyyyyyy ; 2C5: GUI_FEEDBACK* TextFeedbackWindow( BOOK* book, int zero );
;0B18: xxxxxxxx yyyyyyyy ; 2C6: void Feedback_SetKeyHook( GUI_FEEDBACK*, void (*hook)( BOOK* book, int key, int unk, int unk2 ) );
;0B1C: xxxxxxxx yyyyyyyy ; 2C7: void Feedback_SetOnClose( GUI_FEEDBACK*, void (*OnClose)( BOOK* book ) );
;0B20: xxxxxxxx yyyyyyyy ; 2C8: void Feedback_SetTimeout( GUI_FEEDBACK*, int time_ms );
;0B24: xxxxxxxx yyyyyyyy ; 2C9: void Feedback_SetTextExtended( GUI_FEEDBACK*, TEXTID text, int where );
;0B28: xxxxxxxx yyyyyyyy ; 2CA: void TabMenuBar_SetOnTabSwitch( GUI_TABMENUBAR*, void (*proc)( BOOK*, int act_tab ) );
;0B2C: xxxxxxxx yyyyyyyy ; 2CB: TEXTID KeyCode2Name( int key_code );
;0B30: xxxxxxxx yyyyyyyy ; 2CC: int ImageID_Get( const wchar_t* fpath, const wchar_t* fname, IMAGEID* );
;0B34: xxxxxxxx yyyyyyyy ; 2CD: void ImageID_Free( IMAGEID );
;0B38: xxxxxxxx yyyyyyyy ; 2CE: SUB_EXECUTE* DataBrowser_CreateSubExecute( int BookID, FILEITEM* );
;0B3C: xxxxxxxx yyyyyyyy ; 2CF: int DataBrowser_ExecuteSubroutine( SUB_EXECUTE* sub, int action, u16* unk );
;0B40: xxxxxxxx yyyyyyyy ; 2D0: int FILEITEM_SetFname( FILEITEM*, const wchar_t* fname );
;0B44: xxxxxxxx yyyyyyyy ; 2D1: int FILEITEM_SetPath( FILEITEM*, const wchar_t* fpath );
0B48: FFFFFFFF C5A65745 ; 2D2: wchar_t* FILEITEM_GetFname( FILEITEM* );
0B4C: FFFFFFFF 29A75745 ; 2D3: wchar_t* FILEITEM_GetPath( FILEITEM* );
;0B50: xxxxxxxx yyyyyyyy ; 2D4: int FILEITEM_SetFnameAndContentType( FILEITEM*, const wchar_t* fname );
;0B54: xxxxxxxx yyyyyyyy ; 2D5: int FILEITEM_SetPathAndContentType( FILEITEM*, const wchar_t* fpath );
;0B58: xxxxxxxx yyyyyyyy ; 2D6: int JavaDialog_Open( int unk1, char* unk2, void** JavaDesc );
;0B5C: xxxxxxxx yyyyyyyy ; 2D7: void JavaDialog_Close( int unk1 );
;0B60: xxxxxxxx yyyyyyyy ; 2D8: int JavaAppDesc_Get( int unk1, void** JavaDesc );
;0B64: xxxxxxxx yyyyyyyy ; 2D9: int JavaAppDesc_GetFirstApp( void* JavaDesc );
;0B68: xxxxxxxx yyyyyyyy ; 2DA: int JavaAppDesc_GetNextApp( void* JavaDesc );
;0B6C: xxxxxxxx yyyyyyyy ; 2DB: int JavaAppDesc_GetJavaAppInfo( void* JavaDesc, int ID, wchar_t** wstr );
;0B70: xxxxxxxx yyyyyyyy ; 2DC: void OrangeLED_Control( int _free_val, int or_LED_ID, int level, int fade_time );
;0B74: xxxxxxxx yyyyyyyy ; 2DD: void DispObject_SetRefreshTimer( DISP_OBJ*, int time );
;0B78: xxxxxxxx yyyyyyyy ; 2DE: void DispObject_KillRefreshTimer( DISP_OBJ* );
;0B7C: xxxxxxxx yyyyyyyy ; 2DF: int IsDataBrowserBook( BOOK* book );
0B80: FFFFFFFF 918B5745 ; 2E0: SUB_EXECUTE* BrowserItem_Get_SUB_EXECUTE( BOOK* BrowserItemBook );
;0B84: xxxxxxxx yyyyyyyy ; 2E1: TEXTID Shortcut_Get_MenuItemName( void* );
;0B88: xxxxxxxx yyyyyyyy ; 2E2: IMAGEID Shortcut_Get_MenuItemIconID( void* );
;0B8C: xxxxxxxx yyyyyyyy ; 2E3: BOOK* FindBookEx( int (*cmp_proc)( BOOK* book_from_list, int* param ), int* param );
;0B90: xxxxxxxx yyyyyyyy ; 2E4: FILEITEM* FILEITEM_CreateCopy( FILEITEM* );
;0B94: xxxxxxxx yyyyyyyy ; 2E5:
;0B98: xxxxxxxx yyyyyyyy ; 2E6: int BookObj_GetSessionID( BOOK* book );
;0B9C: xxxxxxxx yyyyyyyy ; 2E7: void UI_Event_toSID( int event, int sess_id );
;0BA0: xxxxxxxx yyyyyyyy ; 2E8: char* GetIMSI( void );
;0BA4: xxxxxxxx yyyyyyyy ; 2E9: void UI_CONTROLLED_SHUTDOWN_RESPONSE( int book_id );
;0BA8: xxxxxxxx yyyyyyyy ; 2EA: int MainInput_getCurPos( GUI* );
;0BAC: xxxxxxxx yyyyyyyy ; 2EB: void MainInput_Hide( GUI* );
;0BB0: xxxxxxxx yyyyyyyy ; 2EC: void DispObject_SoftKeys_RestoreDefaultAction( DISP_OBJ*, int action );
;0BB4: xxxxxxxx yyyyyyyy ; 2ED: TEXTID PNUM2Name( void* pnum, int isIconNeeded, int only_full_number_flag );
;0BB8: xxxxxxxx yyyyyyyy ; 2EE: int SpeedDial_GetPNUM( int _zero, char charter0__9, void* PNUM );
;0BBC: xxxxxxxx yyyyyyyy ; 2EF: void* MetaData_Desc_Create( wchar_t* path, wchar_t* name );
;0BC0: xxxxxxxx yyyyyyyy ; 2F0: void MetaData_Desc_Destroy( void* MetaData_Desc );
;0BC4: xxxxxxxx yyyyyyyy ; 2F1: wchar_t* MetaData_Desc_GetTags( void* MetaData_Desc, int tagID );
;0BC8: xxxxxxxx yyyyyyyy ; 2F2: int MetaData_Desc_GetTrackNum( void* MetaData_Desc, int __NULL );
;0BCC: xxxxxxxx yyyyyyyy ; 2F3: int DispObject_GetWindowWidth( DISP_OBJ* );
;0BD0: xxxxxxxx yyyyyyyy ; 2F4: int DispObject_GetWindowHeight( DISP_OBJ* );
;0BD4: xxxxxxxx yyyyyyyy ; 2F5: int get_system_langID( void );
;0BD8: xxxxxxxx yyyyyyyy ; 2F6: char* lang_get_name( int langID );
;0BDC: xxxxxxxx yyyyyyyy ; 2F7: int w_chdir( const wchar_t* path );
;0BE0: xxxxxxxx yyyyyyyy ; 2F8: int w_fopen( const wchar_t* name, int attr, int rights, int err );
0BE4: FFFFFFFF C147AA44 ; 2F9: int w_fstat( const wchar_t* name, W_FSTAT* );
;0BE8: xxxxxxxx yyyyyyyy ; 2FA: int w_fwrite( int f, void* buf, int size );
;0BEC: xxxxxxxx yyyyyyyy ; 2FB: int w_fread( int f, void* buf, int size );
;0BF0: xxxxxxxx yyyyyyyy ; 2FC: int w_lseek( int f, int offs, int mode );
;0BF4: xxxxxxxx yyyyyyyy ; 2FD: int w_fclose( int f );
;0BF8: xxxxxxxx yyyyyyyy ; 2FE: int w_mkdir( const wchar_t* path, int mode );
;0BFC: xxxxxxxx yyyyyyyy ; 2FF: int DirHandle_SetFilterStr( DIR_HANDLE*, const wchar_t* filter );
;0C00: xxxxxxxx yyyyyyyy ; 300: int Disp_GetStrIdWidth( TEXTID, int len );
;0C04: xxxxxxxx yyyyyyyy ; 301: int MetaData_Desc_GetCoverInfo( void* MetaData_Desc, char* cover_type, int* size, int* cover_offset );
;0C08: xxxxxxxx yyyyyyyy ; 302: int ImageID_GetIndirect( void* buf_image, int size, int __NULL, wchar_t* image_type, IMAGEID* );
;0C0C: xxxxxxxx yyyyyyyy ; 303: void unixtime2datetime( int, DATETIME* );
;0C10: xxxxxxxx yyyyyyyy ; 304: int List_Insert( LIST* lst, int i, void* item );
;0C14: xxxxxxxx yyyyyyyy ; 305: int FileCopy( wchar_t* src_path, wchar_t* src_name, wchar_t* dest_path, wchar_t* dest_name, int );
;0C18: xxxxxxxx yyyyyyyy ; 306: int FileMove( wchar_t* src_path, wchar_t* src_name, wchar_t* dest_path, wchar_t* dest_name, int );
;0C1C: xxxxxxxx yyyyyyyy ; 307: void RedLED_On( int __NULL );
;0C20: xxxxxxxx yyyyyyyy ; 308: void RedLED_Off( int __NULL );
;0C24: xxxxxxxx yyyyyyyy ; 309: void DispObject_SetLayerColor( DISP_OBJ*, int color );
;0C28: xxxxxxxx yyyyyyyy ; 30A: int JavaAppDesc_GetJavaAppID( void* JavaDesc );
;0C2C: xxxxxxxx yyyyyyyy ; 30B: void REQUEST_UI_OAF_START_APPLICATION( const int* sync, int appID, char* flag );
;0C30: xxxxxxxx yyyyyyyy ; 30C: int JavaApp_LogoImageID_Get( wchar_t* fullpath, IMAGEID* );
;0C34: xxxxxxxx yyyyyyyy ; 30D: GUI* CreateProgressBar( BOOK* book, int display );
;0C38: xxxxxxxx yyyyyyyy ; 30E: void ProgressBar_SetText( GUI*, TEXTID text );
;0C3C: xxxxxxxx yyyyyyyy ; 30F: void ProgressBar_SetIcon( GUI*, IMAGEID );
;0C40: xxxxxxxx yyyyyyyy ; 310: void ProgressBar_SetPercentValue( GUI*, int value );
;0C44: xxxxxxxx yyyyyyyy ; 311: void ProgressBar_SetBarDisabled( GUI*, BOOL );
;0C48: xxxxxxxx yyyyyyyy ; 312: void StringInput_DispObject_SetText( DISP_OBJ*, TEXTID );
;0C4C: xxxxxxxx yyyyyyyy ; 313: void GUIObject_SetTitleBackgroundImage( GUI*, IMAGEID );
;0C50: xxxxxxxx yyyyyyyy ; 314: void GUIObject_SetTitleIcon( GUI*, IMAGEID );
;0C54: xxxxxxxx yyyyyyyy ; 315: void GUIObject_SetCursorImage( GUI*, IMAGEID );
;0C58: xxxxxxxx yyyyyyyy ; 316: void GUIObject_SetBackgroundImage( GUI*, IMAGEID );
;0C5C: xxxxxxxx yyyyyyyy ; 317: void* DispObject_SoftKeys_GetParams( DISP_OBJ* );
;0C60: xxxxxxxx yyyyyyyy ; 318: LIST* DispObject_SoftKeys_GetList( DISP_OBJ*, BOOK* book, char __zero );
;0C64: xxxxxxxx yyyyyyyy ; 319: int BookObj_GetDisplayOrientation( BOOK* book );
;0C68: xxxxxxxx yyyyyyyy ; 31A: void BookObj_SetDisplayOrientation( BOOK* book, int orientation );
;0C6C: xxxxxxxx yyyyyyyy ; 31B: BOOK* Display_GetTopBook( int display );
;0C70: xxxxxxxx yyyyyyyy ; 31C: void Display_SetBrightness( int display, int brightness );
;0C74: xxxxxxxx yyyyyyyy ; 31D: int Display_GetBrightness( int display );
;0C78: xxxxxxxx yyyyyyyy ; 31E: void DataBrowserDesc_Menu_AddFSFunctions( void* DataBrowserDesc, int );
;0C7C: xxxxxxxx yyyyyyyy ; 31F: void DataBrowserDesc_Menu_AddNewFolder( void* DataBrowserDesc, int );
;0C80: xxxxxxxx yyyyyyyy ; 320: void DataBrowserDesc_Menu_AddMarkFiles( void* DataBrowserDesc, int );
;0C84: xxxxxxxx yyyyyyyy ; 321: void SetTheme( wchar_t* path, wchar_t* name, int bookid, int unk_1 );
;0C88: xxxxxxxx yyyyyyyy ; 322: void SoftKeys_GetLabel( DISP_OBJ* softkeys, SKLABEL* lbl, int id );
;0C8C: xxxxxxxx yyyyyyyy ; 323: void SoftKeys_Update( DISP_OBJ* softkeys );
;0C90: xxxxxxxx yyyyyyyy ; 324: int get_CellData( PLMN_LAC_DESC* desc1, RAT_CI_DESC* desc2, char* CSReg );
;0C94: xxxxxxxx yyyyyyyy ; 325: void* IncommingCall_Reject( BOOK* book );
;0C98: xxxxxxxx yyyyyyyy ; 326: void* IncommingCall_Mute( BOOK* book );
0C9C: FFFFFFFF ED0BB944 ; 327: int GetRadioState( char* level, char* flag );
;0CA0: xxxxxxxx yyyyyyyy ; 328: int Bluetooth_GetState( void );
;0CA4: xxxxxxxx yyyyyyyy ; 329: int Bluetooth_GetPhoneVisibility( void );
;0CA8: xxxxxxxx yyyyyyyy ; 32A: int Bluetooth_isBusy( void );
;0CAC: xxxxxxxx yyyyyyyy ; 32B: int USB_isConnected( void );
;0CB0: xxxxxxxx yyyyyyyy ; 32C: void* w_diropen( const wchar_t* dir );
;0CB4: xxxxxxxx yyyyyyyy ; 32D: wchar_t* w_dirread( void* );
;0CB8: xxxxxxxx yyyyyyyy ; 32E: int w_dirclose( void* );
;0CBC: xxxxxxxx yyyyyyyy ; 32F: int w_rename( const wchar_t* dst, const wchar_t* src );
;0CC0: xxxxxxxx yyyyyyyy ; 330: int w_remove( const wchar_t* dir );
;0CC4: xxxxxxxx yyyyyyyy ; 331: int ConnectionManager_Connection_GetState( void );
0CC8: FFFFFFFF FD0BB944 ; 332: int GetSignalQuality( char* rssi, char* ber );
;0CCC: xxxxxxxx yyyyyyyy ; 333: int IsCameraBook( BOOK* bk );
;0CD0: xxxxxxxx yyyyyyyy ; 334: int IsSoundRecorderBook( BOOK* bk );
;0CD4: xxxxxxxx yyyyyyyy ; 335: void StringInput_MenuItem_SetPriority( GUI* strinp, int prio, int actionID );
;0CD8: xxxxxxxx yyyyyyyy ; 336: void VideoPlayerControl( BOOK* VideoPlayerBook, int );
;0CDC: xxxxxxxx yyyyyyyy ; 337: void Video_ActionBack( BOOK* VideoPlayerBook, void* );
;0CE0: xxxxxxxx yyyyyyyy ; 338: void Video_ExtractFrame( BOOK* VideoPlayerBook, void* );
;0CE4: xxxxxxxx yyyyyyyy ; 339: void Video_ZoomOn( BOOK* VideoPlayerBook, void* );
;0CE8: xxxxxxxx yyyyyyyy ; 33A: void RightNow_SetActive( int flag );
;0CEC: xxxxxxxx yyyyyyyy ; 33B: void VideoResize_AutomateMode( BOOK* VideoPlayerBook, u16 VideoWidth, u16 VideoHeight, u16* NewWidth, u16* NewHeight );
;0CF0: xxxxxxxx yyyyyyyy ; 33C: void VideoResize_AllScreenMode( BOOK* VideoPlayerBook, u16 VideoWidth, u16 VideoHeight, u16* NewWidth, u16* NewHeight );
;0CF4: xxxxxxxx yyyyyyyy ; 33D: int Video_GetCurrentSkinID( BOOK* VideoPlayerBook );
;0CF8: xxxxxxxx yyyyyyyy ; 33E: void Video_SetSkin( GUI* VideoPlayerGUI, int skinID );
;0CFC: xxxxxxxx yyyyyyyy ; 33F: int Video_SetPermit( BOOK* VideoPlayerBook, u16 NewWidth, u16 NewHeight );
;0D00: xxxxxxxx yyyyyyyy ; 340: int Video_Refresh( BOOK* VideoPlayerBook, GUI* VideoPlayerGUI );
;0D04: xxxxxxxx yyyyyyyy ; 341: void Video_Play( BOOK* VideoPlayerBook, void* );
;0D08: xxxxxxxx yyyyyyyy ; 342: void Video_Pause( BOOK* VideoPlayerBook, void* );
;0D0C: xxxxxxxx yyyyyyyy ; 343: void Video_Stop( BOOK* VideoPlayerBook, void* );
;0D10: xxxxxxxx yyyyyyyy ; 344: void Audio_Pause( BOOK* );
;0D14: xxxxxxxx yyyyyyyy ; 345: void Audio_Play( BOOK* );
;0D18: xxxxxxxx yyyyyyyy ; 346: GUI* CreatePercentInputVA( int zero, ... );
;0D1C: xxxxxxxx yyyyyyyy ; 347: int PercentInput_GetPercent( GUI* PercentInput );
;0D20: xxxxxxxx yyyyyyyy ; 348: void GUIonMessage_SetLineSeparator( GUI_MESSAGE* msg, int _unk1 );
;0D24: xxxxxxxx yyyyyyyy ; 349: int PHF_GetState( void );
;0D28: xxxxxxxx yyyyyyyy ; 34A: int CHF_GetState( void );
;0D2C: xxxxxxxx yyyyyyyy ; 34B: void GUIObject_SoftKeys_RemoveBackground( GUI* );
;0D30: xxxxxxxx yyyyyyyy ; 34C: void GUIObject_SoftKeys_RestoreBackground( GUI* );
;0D34: xxxxxxxx yyyyyyyy ; 34D: void SetTrayIcon( IMAGEID, char mode );
;0D38: xxxxxxxx yyyyyyyy ; 34E: int REQUEST_SETTING_RINGVOLUME_SET( const int* sync, int unk, int null, int vol );
;0D3C: xxxxxxxx yyyyyyyy ; 34F: int REQUEST_SETTING_VIBRATOR_SET( const int* sync, int unk, int mode );
;0D40: xxxxxxxx yyyyyyyy ; 350: int REQUEST_SETTING_RINGTYPESOUNDFILE_SET( const int* sync, int null, wchar_t* path, wchar_t* name );
;0D44: xxxxxxxx yyyyyyyy ; 351: int REQUEST_SETTING_ANSWERINGMODE_SET( const int* sync, int unk, int mode );
;0D48: xxxxxxxx yyyyyyyy ; 352: int REQUEST_SETTING_INCREASINGRING_SET( const int* sync, int unk, int unk2, int mode );
;0D4C: xxxxxxxx yyyyyyyy ; 353: int REQUEST_SETTING_ALLOWEDCALLERS_SET( const int* sync, int unk, int mode );
;0D50: xxxxxxxx yyyyyyyy ; 354: int JavaAppDesc_GetJavaAppFullpath( void* JavaDesc, JavaAppFullpath* );
;0D54: xxxxxxxx yyyyyyyy ; 355: void* SoundRecorderDesc_Create( void );
;0D58: xxxxxxxx yyyyyyyy ; 356: void SoundRecorderDesc_Destroy( void* desc );
;0D5C: xxxxxxxx yyyyyyyy ; 357: int SoundRecorderDesc_SetBookID( void* desc, int BookID );
;0D60: xxxxxxxx yyyyyyyy ; 358: int SoundRecorderDesc_SetType( void* desc, const int type );
;0D64: xxxxxxxx yyyyyyyy ; 359: int SoundRecorderDesc_SetFolder( void* desc, const wchar_t* fpath );
;0D68: xxxxxxxx yyyyyyyy ; 35A: int SoundRecorderDesc_SetFname( void* desc, const wchar_t* fname );
;0D6C: xxxxxxxx yyyyyyyy ; 35B: int SoundRecorderDesc_SetRecordSize( void* desc, const int size );
;0D70: xxxxxxxx yyyyyyyy ; 35C: int SoundRecorder_Create( void* desc );
;0D74: xxxxxxxx yyyyyyyy ; 35D: int SoundRecorder_RecordCall( BOOK* OngoingCallBook );
;0D78: xxxxxxxx yyyyyyyy ; 35E: int Browser_OpenURI( BOOK* book, char* URI, int mode );
;0D7C: xxxxxxxx yyyyyyyy ; 35F: char* GetURIScheme( int schemeID );
;0D80: xxxxxxxx yyyyyyyy ; 360: char* CreateURI( wchar_t* fpath, wchar_t* fname, char* URIScheme );
;0D84: xxxxxxxx yyyyyyyy ; 361: void DataBrowserDesc_SetViewModeAndSortOrder( void* DataBrowserDesc, int view_sort_ID );
;0D88: xxxxxxxx yyyyyyyy ; 362: int Alarm_GetCurrentTypeAndAlarmID( char* type, wchar_t* AlarmID );
;0D8C: xxxxxxxx yyyyyyyy ; 363: int Alarm_GetState( char* state, int AlarmID );
;0D90: xxxxxxxx yyyyyyyy ; 364: int Alarm_GetTIME( TIME* AlarmTime, int AlarmID );
;0D94: xxxxxxxx yyyyyyyy ; 365: int Alarm_GetWeekSettings( void* week, int AlarmID );
;0D98: xxxxxxxx yyyyyyyy ; 366: int IrDa_GetState( char* state );
;0D9C: xxxxxxxx yyyyyyyy ; 367: void REQUEST_SETTING_ALLOWEDCALLERS_GET( const int* sync, int ProfileNum, char* state );
;0DA0: xxxxxxxx yyyyyyyy ; 368: void* IncommingCall_Accept( BOOK* book );
;0DA4: xxxxxxxx yyyyyyyy ; 369: void MediaPlayer_SoftKeys_SetText( GUI* player_gui, int actionID, TEXTID );
;0DA8: xxxxxxxx yyyyyyyy ; 36A: void MediaPlayer_SoftKeys_SetAction( GUI* player_gui, int actionID, SKACTIONPROC proc );
;0DAC: xxxxxxxx yyyyyyyy ; 36B: void MediaPlayer_SoftKeys_SetItemAsSubItem( GUI* player_gui, int item, int subitem );
;0DB0: xxxxxxxx yyyyyyyy ; 36C: void MediaPlayer_SoftKeys_AddHelpStr( GUI* player_gui, int item, TEXTID );
;0DB4: xxxxxxxx yyyyyyyy ; 36D: void MediaPlayer_ShowNowPlaying( DISP_OBJ*, int );
;0DB8: xxxxxxxx yyyyyyyy ; 36E: void DispObject_Show( DISP_OBJ*, int mode );
;0DBC: xxxxxxxx yyyyyyyy ; 36F: int Request_EventChannel_Subscribe( const int* sync, int mode, int event );
;0DC0: xxxxxxxx yyyyyyyy ; 370: void GUIObject_SoftKeys_ExecuteAction( GUI*, u16 actionID );
;0DC4: xxxxxxxx yyyyyyyy ; 371: int Request_ICA_ShutdownAllConnections( const int* sync );
;0DC8: xxxxxxxx yyyyyyyy ; 372: int REQUEST_PROFILE_GETPROFILENAME( const int* sync, int unk, TEXTID_DATA*, char* error );
;0DCC: xxxxxxxx yyyyyyyy ; 373: int DataBrowserDesc_SetFocusToFILEITEM( void* DataBrowserDesc, FILEITEM* );
;0DD0: xxxxxxxx yyyyyyyy ; 374: int GUIonMessage_GetMsg( GUI_MESSAGE* msg );
;0DD4: xxxxxxxx yyyyyyyy ; 375: BOOK* GUIonMessage_GetBook( GUI_MESSAGE* msg );
;0DD8: xxxxxxxx yyyyyyyy ; 376: GUI* GUIonMessage_GetGui( GUI_MESSAGE* msg );
;0DDC: xxxxxxxx yyyyyyyy ; 377: int GUIonMessage_GetSelectedItem( GUI_MESSAGE* msg );
;0DE0: xxxxxxxx yyyyyyyy ; 378: int GUIonMessage_GetPrevSelectedItem( GUI_MESSAGE* msg );
;0DE4: xxxxxxxx yyyyyyyy ; 379: void ObexSendFile( SEND_OBEX_STRUCT* );
;0DE8: xxxxxxxx yyyyyyyy ; 37A: void Feedback_SetManualScrollingText( DISP_OBJ* feedback_disp_obj, int state );
;0DEC: xxxxxxxx yyyyyyyy ; 37B: int EqualizerGain_Set( int AudioSessionID, int Band, int Level );
;0DF0: xxxxxxxx yyyyyyyy ; 37C: int CANVAS_Get_GviGC( PCANVAS pcanvas, GVI_GC* dest );
;0DF4: xxxxxxxx yyyyyyyy ; 37D: void GVI_BitBlt( GVI_GC destgc, int destx, int desty, int destxsize, int destysize, GVI_GC srcgc, int srcx, int srcy, int _204, int _0, int _0_2, int _0_3 );
;0DF8: xxxxxxxx yyyyyyyy ; 37E: void GVI_StretchBlt( GVI_GC destgc, int destx, int desty, int destxsize, int destysize, GVI_GC srcgc, int srcx, int srcy, int srcxsize, int srcysize, int _204, int _0, int _0_2, int _0_3 );
;0DFC: xxxxxxxx yyyyyyyy ; 37F: void GVI_TransformBlt( GVI_GC destgc, int destx, int desty, GVI_GC srcgc, int srcx, int srcy, int srcxsize, int srcysize, int orientation, int _0 );
;0E00: xxxxxxxx yyyyyyyy ; 380: GVI_PEN GVI_CreatePen( char thikness, int color );
;0E04: xxxxxxxx yyyyyyyy ; 381: GVI_PEN GVI_CreateDashedPen( char thikness, int color, int bitmask, int step, int offset );
;0E08: xxxxxxxx yyyyyyyy ; 382: GVI_BRUSH GVI_CreateSolidBrush( int color );
;0E0C: xxxxxxxx yyyyyyyy ; 383: BOOL GVI_Delete_GVI_Object( GVI_OBJ* );
;0E10: xxxxxxxx yyyyyyyy ; 384: void GVI_DrawEllipse( GVI_GC gc, int x1, int y1, int x2, int y2, GVI_PEN pen );
;0E14: xxxxxxxx yyyyyyyy ; 385: void GVI_DrawLine( GVI_GC gc, int x1, int y1, int x2, int y2, GVI_PEN pen );
;0E18: xxxxxxxx yyyyyyyy ; 386: void GVI_DrawLines( GVI_GC gc, POINT* points, int count, GVI_PEN pen );
;0E1C: xxxxxxxx yyyyyyyy ; 387: void GVI_DrawPolyLine( GVI_GC gc, POINT* points, int count, GVI_PEN pen, int is_closed );
;0E20: xxxxxxxx yyyyyyyy ; 388: void GVI_DrawRectangle( GVI_GC gc, int x, int y, int w, int h, GVI_PEN pen );
;0E24: xxxxxxxx yyyyyyyy ; 389: void GVI_DrawRoundRect( GVI_GC gc, int x, int y, int w, int h, int arcw, int arch, GVI_PEN pen );
;0E28: xxxxxxxx yyyyyyyy ; 38A: void GVI_DrawSolidLines( GVI_GC gc, POINT* points, int count, int color, int width );
;0E2C: xxxxxxxx yyyyyyyy ; 38B: void GVI_DrawSolidPolyLine( GVI_GC gc, POINT* points, int count, int is_closed, int color, int width );
;0E30: xxxxxxxx yyyyyyyy ; 38C: void GVI_DrawSolidRectangle( GVI_GC gc, int x, int y, int w, int h, int color, int width );
;0E34: xxxxxxxx yyyyyyyy ; 38D: void GVI_FillEllipse( GVI_GC gc, int x, int y, int w, int h, GVI_BRUSH brush );
;0E38: xxxxxxxx yyyyyyyy ; 38E: void GVI_FillPolygon( GVI_GC gc, POINT* pp, int count, GVI_BRUSH brush );
;0E3C: xxxxxxxx yyyyyyyy ; 38F: void GVI_FillRectangle( GVI_GC gc, int x, int y, int w, int h, GVI_BRUSH brush );
;0E40: xxxxxxxx yyyyyyyy ; 390: void GVI_FillRectangles( GVI_GC gc, GVI_XYWH* rcs, int count, GVI_BRUSH brush );
;0E44: xxxxxxxx yyyyyyyy ; 391: void GVI_FillSolidEllipse( GVI_GC gc, int x1, int y1, int x2, int y2, int color );
;0E48: xxxxxxxx yyyyyyyy ; 392: void GVI_FillSolidRectangle( GVI_GC gc, int x, int y, int w, int h, int color );
;0E4C: xxxxxxxx yyyyyyyy ; 393: int GVI_FillSolidRoundRect( GVI_GC gc, int x, int y, int w, int h, int arcx, int arcy, int color );
;0E50: xxxxxxxx yyyyyyyy ; 394: void GVI_FillSolidTriangle( GVI_GC gc, int x1, int y1, int x2, int y2, int x3, int y3, int color );
;0E54: xxxxxxxx yyyyyyyy ; 395: GC* GC_CreateMemoryGC( int xsize, int ysize, int bpp, int unk, void* somefn, int unk2 );
;0E58: xxxxxxxx yyyyyyyy ; 396: void GC_FreeGC( GC* gc );
;0E5C: xxxxxxxx yyyyyyyy ; 397: void REQUEST_ALARMCLOCKSTATUS_GET( const int* sync, char* alarm_status );
;0E60: xxxxxxxx yyyyyyyy ; 398: void REQUEST_ALARMCLOCKTIME_GET( const int* sync, TIME* t );
;0E64: xxxxxxxx yyyyyyyy ; 399: void REQUEST_ALARMDATEANDTIMESTATUS_GET( const int* sync, DATETIME* );
;0E68: xxxxxxxx yyyyyyyy ; 39A: int Settings_ShowNumber_Get( char* state );
;0E6C: xxxxxxxx yyyyyyyy ; 39B: GVI_BMP GVI_CreateBitmap( int xsize, int ysize, int bpp );
;0E70: xxxxxxxx yyyyyyyy ; 39C: GVI_GC GVI_CreateMemoryGC( GVI_BMP bitmap );
;0E74: xxxxxxxx yyyyyyyy ; 39D: void GVI_DeleteMemoryGC( GVI_GC gc );
;0E78: xxxxxxxx yyyyyyyy ; 39E: int StringInput_DispObject_SetLanguage( DISP_OBJ_STRING_INPUT*, int langID, int flag );
;0E7C: xxxxxxxx yyyyyyyy ; 39F: int List_InsertSorted( LIST* list, void* item, int (*cmp_proc)( void*, void* ) );
;0E80: xxxxxxxx yyyyyyyy ; 3A0: int ListMenu_SetItemIcon( GUI_LIST*, int Item, wchar_t unk_FFFF, int mode, IMAGEID );
;0E84: xxxxxxxx yyyyyyyy ; 3A1: void wstrnupr( wchar_t* wstr, int maxlen );
;0E88: xxxxxxxx yyyyyyyy ; 3A2: void wstrnlwr( wchar_t* wstr, int maxlen );
;0E8C: xxxxxxxx yyyyyyyy ; 3A3: int ListMenu_SetItemTextScroll( GUI_LIST*, int scroll );
;0E90: xxxxxxxx yyyyyyyy ; 3A4: void GUIObject_SetTitleTextColor( GUI*, int color );
;0E94: xxxxxxxx yyyyyyyy ; 3A5: void GUIObject_SetListTextColor( GUI*, int unk1, int list_color, int unk2, int unk3, int list_select_color, int unk4, int _zerro );
;0E98: xxxxxxxx yyyyyyyy ; 3A6: void DispObject_SetTitleTextColor( DISP_OBJ*, int color );
;0E9C: xxxxxxxx yyyyyyyy ; 3A7: void DispObject_SetListTextColor( DISP_OBJ*, int unk1, int list_color, int unk2, int unk3, int list_select_color, int unk4, int _zerro );
;0EA0: xxxxxxxx yyyyyyyy ; 3A8: void DispObject_SetCursorImage( DISP_OBJ*, IMAGEID );
;0EA4: xxxxxxxx yyyyyyyy ; 3A9: void DispObject_SetBackgroundImage( DISP_OBJ*, IMAGEID );
;0EA8: xxxxxxxx yyyyyyyy ; 3AA: void DispObject_SetTitleBackgroundImage( DISP_OBJ*, IMAGEID );
;0EAC: xxxxxxxx yyyyyyyy ; 3AB: void TabMenuBar_SetTabTitle( GUI_TABMENUBAR*, int tab_num, TEXTID );
;0EB0: xxxxxxxx yyyyyyyy ; 3AC: BOOK* GUIObject_GetBook( GUI* );
;0EB4: xxxxxxxx yyyyyyyy ; 3AD: u16 SoftKeys_GetSelectedAction( void );
;0EB8: xxxxxxxx yyyyyyyy ; 3AE: void MonitorFeedback_SetTimer( GUI_FEEDBACK*, int time, void (*callback)(BOOK*) );
;0EBC: xxxxxxxx yyyyyyyy ;83AF: void (*getListMenuOnGuiDestroy())( GUI* );
;0EC0: xxxxxxxx yyyyyyyy ;83B0: void (*getListMenuOnDescCreate())( DISP_DESC* );
;0EC4: xxxxxxxx yyyyyyyy ;83B1: void (*getListMenuOnDispMessage())( DISP_OBJ*, void*, GUI* );
;0EC8: xxxxxxxx yyyyyyyy ;83B2: void (*getTabMenuBarOnGuiDestroy())( GUI* );
;0ECC: xxxxxxxx yyyyyyyy ;83B3: void (*getTabMenuBarOnDescCreate())( DISP_DESC* );
;0ED0: xxxxxxxx yyyyyyyy ;83B4: void (*getTabMenuBarOnDispMessage())( DISP_OBJ*, void*, GUI* );
;0ED4: xxxxxxxx yyyyyyyy ;83B5: void (*getOneOfManyOnGuiDestroy())( GUI* );
;0ED8: xxxxxxxx yyyyyyyy ;83B6: void (*getOneOfManyOnDescCreate())( DISP_DESC* );
;0EDC: xxxxxxxx yyyyyyyy ;83B7: void (*getOneOfManyOnDispMessage())( DISP_OBJ*, void*, GUI* );
;0EE0: xxxxxxxx yyyyyyyy ;83B8: void (*getNOfManyOnGuiDestroy())( GUI* );
;0EE4: xxxxxxxx yyyyyyyy ;83B9: void (*getNOfManyOnDescCreate())( DISP_DESC* );
;0EE8: xxxxxxxx yyyyyyyy ;83BA: void (*getNOfManyOnDispMessage())( DISP_OBJ*, void*, GUI* );
;0EEC: xxxxxxxx yyyyyyyy ; 3BB: void ListMenu_DestroyItems( GUI_LIST* );
;0EF0: xxxxxxxx yyyyyyyy ; 3BC: void DispObject_SetScrollBarBackgroundColor( DISP_OBJ*, int color );
;0EF4: xxxxxxxx yyyyyyyy ; 3BD: void DispObject_SetScrollBarColor( DISP_OBJ*, int color );
;0EF8: xxxxxxxx yyyyyyyy ; 3BE: void DispObject_SetSoftkeysColor( DISP_OBJ*, int color );
;0EFC: xxxxxxxx yyyyyyyy ; 3BF: void YesNoQuestion_SetIcon( GUI*, IMAGEID );
;0F00: xxxxxxxx yyyyyyyy ; 3C0: void GUIObject_SetBacklightTimeout( GUI*, int time );
;0F04: xxxxxxxx yyyyyyyy ; 3C1: void ListMenu_SetHotkeyMode( GUI_LIST*, LISTMENU_HOTKEY_MODE );
;0F08: xxxxxxxx yyyyyyyy ; 3C2: void ListMenu_SetSearchLanguageMode( GUI_LIST*, int mode );
;0F0C: xxxxxxxx yyyyyyyy ; 3C3: void ListMenu_EnableSearchHeader( GUI_LIST*, BOOL );
;0F10: xxxxxxxx yyyyyyyy ; 3C4: wchar_t* GUIonMessage_GetSearchString( GUI_MESSAGE* msg );
;0F14: xxxxxxxx yyyyyyyy ; 3C5: int GUIonMessage_GetSearchStringLength( GUI_MESSAGE* msg );
;0F18: xxxxxxxx yyyyyyyy ; 3C6: int EqualizerGain_Get( int AudioSessionID, int Band, int* Level );
;0F1C: xxxxxxxx yyyyyyyy ; 3C7: int Theme_DestroyMenuIcons( void );
;0F20: xxxxxxxx yyyyyyyy ; 3C8: void CoCreateInstance( PUUID cid, PUUID iid, void** pInterface );
;0F24: xxxxxxxx yyyyyyyy ; 3C9: void GUIObject_SetSecondRowTitleText( GUI*, TEXTID );
;0F28: xxxxxxxx yyyyyyyy ; 3CA: int ListMenu_GetItemCount( GUI_LIST* );
;0F2C: xxxxxxxx yyyyyyyy ; 3CB: void OSE_GetShell( void** pInterface );
;0F30: xxxxxxxx yyyyyyyy ; 3CC: int swscanf( const wchar_t* buffer, const wchar_t* format, ... );
;0F34: xxxxxxxx yyyyyyyy ; 3CD: int sscanf( const char* buffer, const char* format, ... );
;0F38: xxxxxxxx yyyyyyyy ; 3CE: void BookObj_WindowSetWantsFocus( BOOK* book, int display, BOOL WantsFocus );
;0F3C: xxxxxxxx yyyyyyyy ; 3CF: void BookObj_StayOnTop( BOOK* book, int mode );
;0F40: xxxxxxxx yyyyyyyy ; 3D0: void DispObject_WindowSetPosition( DISP_OBJ*, int x, int y );
;0F44: xxxxxxxx yyyyyyyy ; 3D1: void DispObject_WindowSetSize( DISP_OBJ*, int w, int h );
;0F48: xxxxxxxx yyyyyyyy ; 3D2: TEXTID Feedback_DispObject_GetText( DISP_OBJ* );
;0F4C: xxxxxxxx yyyyyyyy ; 3D3: void DispObject_SoftKeys_ExecuteAction( DISP_OBJ*, u16 actionID );
;0F50: xxxxxxxx yyyyyyyy ; 3D4: LIST* DataBrowserBook_GetCurrentFoldersList( BOOK* DataBrowserBook );





;locale=Russian_Russia.1251
