__swi __arm int AB_DEFAULTNBR_GET( int rec_num, void* mem_0x30, int* unk );
__swi __arm int AB_GETNBROFITEMS( int get_from, int sub_id );
__swi __arm int AB_POSITIONNBR_GET( void* ab_name, char*, u16*, void* ab_num );
__swi __arm int AB_READPHONENBR( AB_NUM_ITEM*, int rec_num, int field_ID );
__swi __arm int AB_READSTRING( AB_STR_ITEM*, int rec_num, int field_ID );
__swi __arm int Alarm_GetCurrentTypeAndAlarmID( char* type, wchar_t* AlarmID );
__swi __arm int Alarm_GetState( char* state, int AlarmID );
__swi __arm int Alarm_GetTIME( TIME* AlarmTime, int AlarmID );
__swi __arm int Alarm_GetWeekSettings( void* week, int AlarmID );
__swi __arm PAudioControl AudioControl_Init( void );
__swi __arm int AudioControl_Vibrate( PAudioControl pIAudioControl, int vibratime, int pausetime, int totaltime );
__swi __arm void Audio_Pause( BOOK* );
__swi __arm void Audio_Play( BOOK* );
__swi __arm int Bluetooth_GetPhoneVisibility( void );
__swi __arm int Bluetooth_GetState( void );
__swi __arm int Bluetooth_isBusy( void );
__swi __arm void BookObj_AddGUIObject( BOOK* book, GUI* );
__swi __arm void BookObj_CallPage( BOOK* book, const PAGE_DESC* page );
__swi __arm void BookObj_CallSubroutine( BOOK* book, BOOK_SUBROUTINE* subr );
__swi __arm int BookObj_GetBookID( BOOK* book );
__swi __arm int BookObj_GetDisplayOrientation( BOOK* book );
__swi __arm UI_APP_SESSION* BookObj_GetSession( BOOK* book );
__swi __arm int BookObj_GetSessionID( BOOK* book );
__swi __arm void BookObj_GotoPage( BOOK* book, const PAGE_DESC* page );
__swi __arm void BookObj_Hide( BOOK* book, int display );
__swi __arm void BookObj_ReturnPage( BOOK* book, int );
__swi __arm void BookObj_SetDisplayOrientation( BOOK* book, int orientation );
__swi __arm void BookObj_SetFocus( BOOK* book, int display );
__swi __arm void BookObj_Show( BOOK* book, int display );
__swi __arm void BookObj_SoftKeys_SetAction( BOOK* book, int actionID, SKACTIONPROC proc );
__swi __arm void BookObj_StayOnTop( BOOK* book, int mode );
__swi __arm void BookObj_WindowSetWantsFocus( BOOK* book, int display, BOOL WantsFocus );
__swi __arm SUB_EXECUTE* BrowserItem_Get_SUB_EXECUTE( BOOK* BrowserItemBook );
__swi __arm int Browser_OpenURI( BOOK* book, char* URI, int mode );
__swi __arm void Cale_GetSettings( int setID, void* );
__swi __arm void* CallID_GetCallStatusDesc( int CallID );
__swi __arm wchar_t* CallStatusDesc_GetName( void* CallStatusDesc );
__swi __arm int CANVAS_Get_GviGC( PCANVAS pcanvas, GVI_GC* dest );
__swi __arm int CHF_GetState( void );
__swi __arm int chmod( const wchar_t* path, const wchar_t* fname, int amode );
__swi __arm void CoCreateInstance( PUUID cid, PUUID iid, void** pInterface );
__swi __arm int ConnectionManager_Connection_GetState( void );
__swi __arm PROCESS current_process( void );
__swi __arm void DataBrowserDesc_Menu_AddFSFunctions( void* DataBrowserDesc, int );
__swi __arm void DataBrowserDesc_Menu_AddMarkFiles( void* DataBrowserDesc, int );
__swi __arm void DataBrowserDesc_Menu_AddNewFolder( void* DataBrowserDesc, int );
__swi __arm void DataBrowserDesc_SetActions( void* DataBrowserDesc, char* actions );
__swi __arm void DataBrowserDesc_SetBookID( void* DataBrowserDesc, int BookID );
__swi __arm void DataBrowserDesc_SetFileExtList( void* DataBrowserDesc, const wchar_t* ExtList );
__swi __arm int DataBrowserDesc_SetFocusToFILEITEM( void* DataBrowserDesc, FILEITEM* );
__swi __arm void DataBrowserDesc_SetFolders( void* DataBrowserDesc, const wchar_t** FolderList );
__swi __arm void DataBrowserDesc_SetFoldersNumber( void* DataBrowserDesc, int state );
__swi __arm void DataBrowserDesc_SetItemFilter( void* DataBrowserDesc, DB_FILE_FILTER );
__swi __arm void DataBrowserDesc_SetItemStyle( void* DataBrowserDesc, int style );
__swi __arm void DataBrowserDesc_SetOpenEmptyFolder( void* DataBrowserDesc, int state );
__swi __arm void DataBrowserDesc_SetOption( void* DataBrowserDesc, char* option );
__swi __arm void DataBrowserDesc_SetSelectAction( void* DataBrowserDesc, int state );
__swi __arm void DataBrowserDesc_SetSelectActionOnFolders( void* DataBrowserDesc, int state );
__swi __arm void DataBrowserDesc_SetViewModeAndSortOrder( void* DataBrowserDesc, int view_sort_ID );
__swi __arm void DataBrowser_Create( void* DataBrowserDesc );
__swi __arm int DataBrowser_isFileInListExt( const wchar_t* ext_table, const wchar_t* path, const wchar_t* fname );
__swi __arm DB_FILE_FILTER DataBrowser_isFileInListExt_adr( void );
__swi __arm unsigned int DateInput_GetDateInt( GUI* );
__swi __arm int datetime2unixtime( DATETIME* dt );
__swi __arm void DATE_GetWeekDay( DATE*, char* dest );
__swi __arm void debug_printf( const char* fmt, ... );
__swi __arm void delay( OSTIME timeout );
__swi __arm int DirHandle_SetFilterStr( DIR_HANDLE*, const wchar_t* filter );
__swi __arm int Display_GetBrightness( int display );
__swi __arm DISP_OBJ* Display_GetFocusedDispObject( int display );
__swi __arm int Display_GetHeight( int display );
__swi __arm BOOK* Display_GetTopBook( int display );
__swi __arm int Display_GetWidth( int display );
__swi __arm void Display_SetBrightness( int display, int brightness );
__swi __arm int DispObject_GetAbsoluteXPos( DISP_OBJ* );
__swi __arm int DispObject_GetAbsoluteYPos( DISP_OBJ* );
__swi __arm DISP_DESC* DispObject_GetDESC( DISP_OBJ* ); // !!!!! не настоящий !!!!!!
__swi __arm GUI* DispObject_GetGUI( DISP_OBJ* );
__swi __arm DISP_OBJ_METHOD DispObject_GetMethod04( DISP_OBJ* );
__swi __arm DISP_OBJ_METHOD DispObject_GetMethod05( DISP_OBJ* );
__swi __arm DISP_OBJ_METHOD DispObject_GetMethod06( DISP_OBJ* );
__swi __arm DISP_OBJ_METHOD DispObject_GetMethod07( DISP_OBJ* );
__swi __arm DISP_OBJ_METHOD DispObject_GetMethod0A( DISP_OBJ* );
__swi __arm DISP_OBJ_METHOD DispObject_GetMethod0B( DISP_OBJ* );
__swi __arm DISP_OBJ_METHOD DispObject_GetMethod0C( DISP_OBJ* );
__swi __arm char* DispObject_GetName( DISP_OBJ* );
__swi __arm DISP_OBJ_ONCLOSE_METHOD DispObject_GetOnClose( DISP_OBJ* );
__swi __arm DISP_OBJ_METHOD DispObject_GetOnConfig( DISP_OBJ* );
__swi __arm DISP_OBJ_ONCREATE_METHOD DispObject_GetOnCreate( DISP_OBJ* );
__swi __arm DISP_OBJ_ONKEY_METHOD DispObject_GetOnKey( DISP_OBJ* );
__swi __arm DISP_OBJ_METHOD DispObject_GetOnLayout( DISP_OBJ* );
__swi __arm DISP_OBJ_ONREDRAW_METHOD DispObject_GetOnRedraw( DISP_OBJ* );
__swi __arm DISP_OBJ_METHOD DispObject_GetonRefresh( DISP_OBJ* );
__swi __arm void DispObject_GetRect( DISP_OBJ*, RECT* );
__swi __arm char DispObject_GetVisible( DISP_OBJ* );
__swi __arm int DispObject_GetWindowHeight( DISP_OBJ* );
__swi __arm int DispObject_GetWindowWidth( DISP_OBJ* );
__swi __arm void DispObject_InvalidateRect( DISP_OBJ*, RECT* );
__swi __arm void DispObject_KillRefreshTimer( DISP_OBJ* );
__swi __arm void DispObject_SetAnimation( DISP_OBJ*, int style );
__swi __arm void DispObject_SetLayerColor( DISP_OBJ*, int color );
__swi __arm void DispObject_SetListTextColor( DISP_OBJ*, int unk1, int list_color, int unk2, int unk3, int list_select_color, int unk4, int _zerro );
__swi __arm void DispObject_SetRefreshTimer( DISP_OBJ*, int time );
__swi __arm void DispObject_SetScrollBarBackgroundColor( DISP_OBJ*, int color );
__swi __arm void DispObject_SetScrollBarColor( DISP_OBJ*, int color );
__swi __arm void DispObject_SetSoftkeysColor( DISP_OBJ*, int color );
__swi __arm void DispObject_SetTitleTextColor( DISP_OBJ*, int color );
__swi __arm void DispObject_Show( DISP_OBJ*, int mode );
__swi __arm void DispObject_SoftKeys_ExecuteAction( DISP_OBJ*, u16 actionID );
__swi __arm DISP_OBJ* DispObject_SoftKeys_Get( void );
__swi __arm LIST* DispObject_SoftKeys_GetList( DISP_OBJ*, BOOK* book, char __zero );
__swi __arm void* DispObject_SoftKeys_GetParams( DISP_OBJ* );
__swi __arm void DispObject_SoftKeys_RestoreDefaultAction( DISP_OBJ*, int action );
__swi __arm void DispObject_WindowSetPosition( DISP_OBJ*, int x, int y );
__swi __arm void DispObject_WindowSetSize( DISP_OBJ*, int w, int h );
__swi __arm u16 DISP_DESC_GetSize( DISP_OBJ* );
__swi __arm void DISP_DESC_SetMethod04( DISP_DESC*, void (*)( void* ) );
__swi __arm void DISP_DESC_SetMethod05( DISP_DESC*, void (*)( void* ) );
__swi __arm void DISP_DESC_SetMethod06( DISP_DESC*, DISP_OBJ_METHOD );
__swi __arm void DISP_DESC_SetMethod07( DISP_DESC*, void (*)( void* ) );
__swi __arm void DISP_DESC_SetMethod0A( DISP_DESC*, void (*)( void* ) );
__swi __arm void DISP_DESC_SetMethod0B( DISP_DESC*, void (*)( void* ) );
__swi __arm void DISP_DESC_SetMethod0C( DISP_DESC*, void (*)( void* ) );
__swi __arm void DISP_DESC_SetName( DISP_DESC*, const char* name );
__swi __arm void DISP_DESC_SetOnClose( DISP_DESC*, DISP_OBJ_ONCLOSE_METHOD );
__swi __arm void DISP_DESC_SetOnConfig( DISP_DESC*, void (*)( void* ) );
__swi __arm void DISP_DESC_SetOnCreate( DISP_DESC*, DISP_OBJ_ONCREATE_METHOD );
__swi __arm void DISP_DESC_SetOnKey( DISP_DESC*, DISP_OBJ_ONKEY_METHOD );
__swi __arm void DISP_DESC_SetOnLayout( DISP_DESC*, DISP_OBJ_METHOD );
__swi __arm void DISP_DESC_SetOnRedraw( DISP_DESC*, DISP_OBJ_ONREDRAW_METHOD );
__swi __arm void DISP_DESC_SetOnRefresh( DISP_DESC*, DISP_OBJ_METHOD );
__swi __arm void DISP_DESC_SetSize( DISP_DESC*, u16 size );
__swi __arm int Disp_GetTextIDWidth( TEXTID, int len );
__swi __arm void DrawRect( int x1, int y1, int x2, int y2, int pen_color, int brush_color );
__swi __arm void DrawString( TEXTID, int align, int x1, int y1, int x2, int y2, int unk, int unk1, int pen_color, int brush_color );
__swi __arm int elfload( const wchar_t* filename, void* param1, void* param2, void* param3 );
__swi __arm int EqualizerGain_Get( int AudioSessionID, int Band, int* Level );
__swi __arm int EqualizerGain_Set( int AudioSessionID, int Band, int Level );
__swi __arm TEXTID Feedback_DispObject_GetText( DISP_OBJ* );
__swi __arm void Feedback_SetKeyHook( GUI_FEEDBACK*, void (*hook)( BOOK* book, int key, int unk, int unk2 ) );
__swi __arm void Feedback_SetManualScrollingText( DISP_OBJ* feedback_disp_obj, int state );
__swi __arm void Feedback_SetOnClose( GUI_FEEDBACK*, void (*OnClose)( BOOK* book ) );
__swi __arm void Feedback_SetTimeout( GUI_FEEDBACK*, int time_ms );
__swi __arm int FileCopy( wchar_t* src_path, wchar_t* src_name, wchar_t* dest_path, wchar_t* dest_name, int );
__swi __arm void FileDelete( wchar_t* path, wchar_t* filename, int* error );
__swi __arm void* FILEITEM_Destroy_adr( void );
__swi __arm wchar_t* FILEITEM_GetFname( FILEITEM* );
__swi __arm wchar_t* FILEITEM_GetPath( FILEITEM* );
__swi __arm int FILEITEM_SetFname( FILEITEM*, const wchar_t* fname );
__swi __arm int FILEITEM_SetFnameAndContentType( FILEITEM*, const wchar_t* fname );
__swi __arm int FILEITEM_SetPath( FILEITEM*, const wchar_t* fpath );
__swi __arm int FILEITEM_SetPathAndContentType( FILEITEM*, const wchar_t* fpath );
__swi __arm int FileMove( wchar_t* src_path, wchar_t* src_name, wchar_t* dest_path, wchar_t* dest_name, int );
__swi __arm BOOK* FindBook( IS_NEEDED_BOOK );
__swi __arm BOOK* FindBookByID( int BookID );
__swi __arm BOOK* FindBookEx( int (*cmp_proc)( BOOK* book_from_list, int* param ), int* param );
__swi __arm BOOK* Find_StandbyBook( void );
__swi __arm int fread( int file, void* ptr, int size );
__swi __arm int fstat( const wchar_t* path, const wchar_t* fname, FSTAT* fstat_stuct );
__swi __arm wchar_t* FSX_GetInvalidChar( wchar_t* name );
__swi __arm void FSX_RemoveIllegalSymbolsName( FILEITEM* );
__swi __arm int fwrite( int file, const void* ptr, int size );
__swi __arm void GC_DrawFRect( GC* gc, int color, int x1, int y1, int x2, int y2 );
__swi __arm void GC_DrawLine( GC* gc, int x1, int y1, int x2, int y2 );
__swi __arm void GC_DrawRoundRect( GC* gc, RECT*, int arcWidth, int arcHeight, int border_flag, int fill_flag );
__swi __arm int GC_GetBrushColor( GC* gc );
__swi __arm int GC_GetPenColor( GC* gc );
__swi __arm void GC_GetRect( GC* gc, RECT* );
__swi __arm int GC_GetXX( GC* gc );
__swi __arm void GC_PutChar( GC* gc, int x, int y, int _zero, int zero1, wchar_t wchar );
__swi __arm void GC_SetBrushColor( GC* gc, int brush_color );
__swi __arm void GC_SetPenColor( GC* gc, int pen_color );
__swi __arm void GC_SetPixel( GC* gc, int x1, int y1, int color );
__swi __arm void GC_SetXX( GC* gc, int );
__swi __arm void GC_ValidateRect( GC* gc, RECT* );
__swi __arm int GC_WritePixels( GC* gc, int x1, int y1, int x2, int y2, int* bmp );
__swi __arm int GetABRecNum( AB_GET_STRUCT* );
__swi __arm PAudioControl* GetAudioControlPtr( void );
__swi __arm int GetAudioSettings( int what, char* retvalue );
__swi __arm int GetBatteryState( void* unused, BATT* );
__swi __arm int GetChipID( void );
__swi __arm PROCESS GetCurrentPID( void );
__swi __arm wchar_t* GetDir( int DirIndex );
__swi __arm wchar_t* getFileExtention( wchar_t* fname );
__swi __arm FILELISTITEM* GetFname( DIR_HANDLE*, FILELISTITEM* );
__swi __arm int* GetFontCount( void );
__swi __arm FONT_DESC* GetFontDesc( void );
__swi __arm int GetFreeBytesOnHeap( void );
__swi __arm int GetImageHeight( IMAGEID );
__swi __arm int GetImageWidth( IMAGEID );
__swi __arm char* GetIMSI( void );
__swi __arm void (*getListMenuOnDescCreate())( DISP_DESC* );
__swi __arm void (*getListMenuOnDispMessage())( DISP_OBJ*, void*, GUI* );
__swi __arm void (*getListMenuOnGuiDestroy())( GUI* );
__swi __arm void (*getNOfManyOnDescCreate())( DISP_DESC* );
__swi __arm void (*getNOfManyOnDispMessage())( DISP_OBJ*, void*, GUI* );
__swi __arm void (*getNOfManyOnGuiDestroy())( GUI* );
__swi __arm void (*getOneOfManyOnDescCreate())( DISP_DESC* );
__swi __arm void (*getOneOfManyOnDispMessage())( DISP_OBJ*, void*, GUI* );
__swi __arm void (*getOneOfManyOnGuiDestroy())( GUI* );
__swi __arm void GetOtherExtMethods( FILESUBROUTINE** );
__swi __arm int GetRadioState( char* level, char* flag );
__swi __arm int GetSignalQuality( char* rssi, char* ber );
__swi __arm int GetSilent( void );
__swi __arm void (*getTabMenuBarOnDescCreate())( DISP_DESC* );
__swi __arm void (*getTabMenuBarOnDispMessage())( DISP_OBJ*, void*, GUI* );
__swi __arm void (*getTabMenuBarOnGuiDestroy())( GUI* );
__swi __arm int GetThemeColor( int, int );
__swi __arm char* GetURIScheme( int schemeID );
__swi __arm int GetVibrator( int ignorevibrator, int ignoresilent );
__swi __arm int GetVolumeSize( wchar_t* root_folder, VOLUMESIZE* );
__swi __arm AB_ITEM_DESC* get_AB_ITEMS_DESC( void );
__swi __arm void* get_APP_DESC_TABLE( void );
__swi __arm PROCESS get_bid( PROCESS pid );
__swi __arm int get_CellData( PLMN_LAC_DESC* desc1, RAT_CI_DESC* desc2, char* CSReg );
__swi __arm GC* get_DisplayGC( void );
__swi __arm OSADDRESS get_envp( PROCESS pid, char* name );
__swi __arm IS_NEEDED_BOOK get_IsAudioPlayerBook( void );
__swi __arm IS_NEEDED_BOOK get_IsCameraBook( void );
__swi __arm IS_NEEDED_BOOK get_IsDataBrowserBook( void );
__swi __arm IS_NEEDED_BOOK get_IsFmRadioBook( void );
__swi __arm IS_NEEDED_BOOK get_IsMediaPlayerVideoBook( void );
__swi __arm IS_NEEDED_BOOK get_IsRightNowBook( void );
__swi __arm IS_NEEDED_BOOK get_IsScreenSaverBook( void );
__swi __arm IS_NEEDED_BOOK get_IsSoundRecorderBook( void );
__swi __arm IS_NEEDED_BOOK get_IsVolumeControllerBook( void );
__swi __arm OSBOOLEAN get_mem( PROCESS pid, OSADDRESS from, void* to, OSADDRESS size );
__swi __arm int get_ptype( PROCESS pid );
__swi __arm SURFACE** get_Surfaces( void );
__swi __arm int get_system_langID( void );
__swi __arm int get_VBUFFER( void );
__swi __arm void GoMusic( void );
__swi __arm int GPRS_GetLastSessionInfo( int, GPRS_SESSION_INFO* );
__swi __arm BOOK* GUIObject_GetBook( GUI* );
__swi __arm DISP_OBJ* GUIObject_GetDispObject( GUI* );
__swi __arm void GUIObject_SetBacklightTimeout( GUI*, int time );
__swi __arm void GUIObject_SetFocus( GUI*, int );
__swi __arm void GUIObject_SetListTextColor( GUI*, int unk1, int list_color, int unk2, int unk3, int list_select_color, int unk4, int _zerro );
__swi __arm void GUIObject_SetStyle( GUI*, int style );
__swi __arm void GUIObject_SetTitleTextColor( GUI*, int color );
__swi __arm void GUIObject_SetTitleType( GUI*, int type );
__swi __arm void GUIObject_SetZOrder( GUI*, char, GUI* );
__swi __arm void GUIObject_Show( GUI* );
__swi __arm void GUIObject_SoftKeys_ExecuteAction( GUI*, u16 actionID );
__swi __arm void GUIObject_SoftKeys_Hide( GUI* );
__swi __arm void GUIObject_SoftKeys_RemoveBackground( GUI* );
__swi __arm void GUIObject_SoftKeys_RemoveItem( GUI*, u16 actionID );
__swi __arm void GUIObject_SoftKeys_RestoreBackground( GUI* );
__swi __arm void GUIObject_SoftKeys_SetAction( GUI*, u16 actionID, SKACTIONPROC proc );
__swi __arm void GUIObject_SoftKeys_SetEnable( GUI*, u16 actionID, BOOL );
__swi __arm void GUIObject_SoftKeys_SetItemAsSubItem( GUI*, u16 actionID, int subitem );
__swi __arm void GUIObject_SoftKeys_SetVisible( GUI*, u16 actionID, BOOL );
__swi __arm void GUIObject_SoftKeys_Show( GUI* );
__swi __arm void GUIObject_SoftKeys_SubActionPressedNotification( GUI*, u16 actionID, BOOL );
__swi __arm void GUIObject_SoftKeys_SuppressDefaultAction( GUI*, u16 actionID );
__swi __arm BOOK* GUIonMessage_GetBook( GUI_MESSAGE* msg );
__swi __arm int GUIonMessage_GetCreatedItemIndex( GUI_MESSAGE* msg );
__swi __arm GUI* GUIonMessage_GetGui( GUI_MESSAGE* msg );
__swi __arm int GUIonMessage_GetMsg( GUI_MESSAGE* msg );
__swi __arm int GUIonMessage_GetPrevSelectedItem( GUI_MESSAGE* msg );
__swi __arm wchar_t* GUIonMessage_GetSearchString( GUI_MESSAGE* msg );
__swi __arm int GUIonMessage_GetSearchStringLength( GUI_MESSAGE* msg );
__swi __arm int GUIonMessage_GetSelectedItem( GUI_MESSAGE* msg );
__swi __arm void GUIonMessage_SetItemDisabled( GUI_MESSAGE* msg, BOOL );
__swi __arm void GUIonMessage_SetLineSeparator( GUI_MESSAGE* msg, int _unk1 );
__swi __arm void GUIonMessage_SetNumberOfSubItems( GUI_MESSAGE* msg, int unk, int num_sub_items );
__swi __arm int GUIonMessage_SubItem_GetCreatedIndex( GUI_MESSAGE* msg );
__swi __arm int GUIonMessage_SubItem_GetCreatedParentIndex( GUI_MESSAGE* msg );
__swi __arm int GUIonMessage_SubItem_GetSelectedIndex( GUI_MESSAGE* msg );
__swi __arm int GUIonMessage_SubItem_GetSelectedParentIndex( GUI_MESSAGE* msg );
__swi __arm void GUIonMessage_SubItem_SetDisabled( GUI_MESSAGE* msg, BOOL state );
__swi __arm void GVI_BitBlt( GVI_GC destgc, int destx, int desty, int destxsize, int destysize, GVI_GC srcgc, int srcx, int srcy, int _204, int _0, int _0_2, int _0_3 );
__swi __arm void GVI_DrawEllipse( GVI_GC gc, int x, int y, int w, int h, GVI_PEN pen );
__swi __arm void GVI_DrawLine( GVI_GC gc, int x1, int y1, int x2, int y2, GVI_PEN pen );
__swi __arm void GVI_DrawLines( GVI_GC gc, POINT* points, int count, GVI_PEN pen );
__swi __arm void GVI_DrawPolyLine( GVI_GC gc, POINT* points, int count, GVI_PEN pen, int is_closed );
__swi __arm void GVI_DrawRectangle( GVI_GC gc, int x, int y, int w, int h, GVI_PEN pen );
__swi __arm void GVI_DrawRoundRect( GVI_GC gc, int x, int y, int w, int h, int arcw, int arch, GVI_PEN pen );
__swi __arm void GVI_DrawSolidLines( GVI_GC gc, POINT* points, int count, int color, int width );
__swi __arm void GVI_DrawSolidPolyLine( GVI_GC gc, POINT* points, int count, int is_closed, int color, int width );
__swi __arm void GVI_DrawSolidRectangle( GVI_GC gc, int x, int y, int w, int h, int color, int width );
__swi __arm void GVI_FillEllipse( GVI_GC gc, int x, int y, int w, int h, GVI_BRUSH brush );
__swi __arm void GVI_FillPolygon( GVI_GC gc, POINT* pp, int count, GVI_BRUSH brush );
__swi __arm void GVI_FillRectangle( GVI_GC gc, int x, int y, int w, int h, GVI_BRUSH brush );
__swi __arm void GVI_FillRectangles( GVI_GC gc, GVI_XYWH* rcs, int count, GVI_BRUSH brush );
__swi __arm void GVI_FillSolidEllipse( GVI_GC gc, int x, int y, int w, int h, int color );
__swi __arm void GVI_FillSolidRectangle( GVI_GC gc, int x, int y, int w, int h, int color );
__swi __arm int GVI_FillSolidRoundRect( GVI_GC gc, int x, int y, int w, int h, int arcx, int arcy, int color );
__swi __arm void GVI_FillSolidTriangle( GVI_GC gc, int x1, int y1, int x2, int y2, int x3, int y3, int color );
__swi __arm void GVI_StretchBlt( GVI_GC destgc, int destx, int desty, int destxsize, int destysize, GVI_GC srcgc, int srcx, int srcy, int srcxsize, int srcysize, int _204, int _0, int _0_2, int _0_3 );
__swi __arm void GVI_TransformBlt( GVI_GC destgc, int destx, int desty, GVI_GC srcgc, int srcx, int srcy, int srcxsize, int srcysize, int orientation, int _0 );
__swi __arm int iconidname2id( const wchar_t* idname, int maxnamelen, int* id );
__swi __arm void IMB ( void );
__swi __arm void* IncommingCall_Accept( BOOK* book );
__swi __arm void* IncommingCall_Mute( BOOK* book );
__swi __arm void* IncommingCall_Reject( BOOK* book );
__swi __arm void IndicationDevice_Backlight_FadeToLevel( int unk_zero, int bl_level );
__swi __arm int IrDa_GetState( char* state );
__swi __arm int IsAudioPlayerBook( BOOK* bk);
__swi __arm int IsCameraBook( BOOK* bk );
__swi __arm int IsDataBrowserBook( BOOK* book );
__swi __arm int IsFmRadioBook( BOOK* bk );
__swi __arm int isKeylocked( void );
__swi __arm int IsMediaPlayerVideoBook( BOOK* bk );
__swi __arm int IsRightNowBook( BOOK* book );
__swi __arm int IsScreenSaverBook( BOOK* bk );
__swi __arm int IsSoundRecorderBook( BOOK* bk );
__swi __arm int IsVolumeControllerBook( BOOK* book );
__swi __arm void JavaSession_Manager( int cmd );
__swi __arm char* lang_get_name( int langID );
__swi __arm DB_EXT* LastExtDB( void );
__swi __arm void ListMenu_DestroyItems( GUI_LIST* );
__swi __arm void ListMenu_EnableSearchHeader( GUI_LIST*, BOOL );
__swi __arm int ListMenu_GetItemCount( GUI_LIST* );
__swi __arm int ListMenu_GetSelectedItem( GUI_LIST* );
__swi __arm void ListMenu_SetCursorToItem( GUI_LIST*, int item );
__swi __arm void ListMenu_SetHotkeyMode( GUI_LIST*, LISTMENU_HOTKEY_MODE );
__swi __arm void ListMenu_SetItemCount( GUI_LIST*, int item_count );
__swi __arm void ListMenu_SetItemStyle( GUI_LIST*, int style );
__swi __arm int ListMenu_SetItemTextScroll( GUI_LIST*, int scroll );
__swi __arm void ListMenu_SetOnMessage( GUI_LIST*, int (*proc)( GUI_MESSAGE* ) );
__swi __arm void ListMenu_SetSearchLanguageMode( GUI_LIST*, int mode );
__swi __arm void List_DestroyElements( LIST* lst, int (*cmp_proc)( void* item ), void (*free_proc)( void* item ) );
__swi __arm int List_Find( LIST* lst, void* itemtofind, LISTFINDCALLBACK cmp_proc );
__swi __arm void* List_Get( LIST* lst, int index );
__swi __arm int List_IndexOf( LIST* lst, void* item );
__swi __arm int List_Insert( LIST* lst, int i, void* item );
__swi __arm int List_InsertFirst( LIST* lst, void* item );
__swi __arm int List_InsertLast( LIST* lst, void* item );
__swi __arm int List_InsertSorted( LIST* list, void* item, int (*cmp_proc)( void*, void* ) );
__swi __arm void* List_RemoveAt( LIST* lst, int index );
__swi __arm void longjmp( jmp_buf, int );
__swi __arm int lseek( int file, int offset, int mode );
__swi __arm int MainInput_getCurPos( GUI* );
__swi __arm BCD_TEXT MainInput_getPNUM( GUI* );
__swi __arm int MainInput_getVisible( GUI* );
__swi __arm void MainInput_Hide( GUI* );
__swi __arm int MainInput_isPlus( GUI* );
__swi __arm int MainInput_strlen( GUI* );
__swi __arm void MakeVoiceCall( int SessioID, void* vc, int flag );
__swi __arm void MediaPlayer_ShowNowPlaying( DISP_OBJ*, int );
__swi __arm void MediaPlayer_SoftKeys_SetAction( GUI* player_gui, int actionID, SKACTIONPROC proc );
__swi __arm void MediaPlayer_SoftKeys_SetItemAsSubItem( GUI* player_gui, int item, int subitem );
__swi __arm int memcmp( const void* m1, const void* m2, int n );
__swi __arm int memcpy( void* dest, const void* source, int cnt );
__swi __arm void* memset( void* mem, char chr, int size );
__swi __arm BOOK* MenuBook_Desktop( int mode, int BookID );
__swi __arm int MetaData_Desc_GetCoverInfo( void* MetaData_Desc, char* cover_type, int* size, int* cover_offset );
__swi __arm wchar_t* MetaData_Desc_GetTags( void* MetaData_Desc, int tagID );
__swi __arm int MetaData_Desc_GetTrackNum( void* MetaData_Desc, int __NULL );
__swi __arm char* MissedEvents( void );
__swi __arm int mkdir( const wchar_t* path );
__swi __arm void MMIPROC( void (*PROC)( int, void* ), int p1, void* p2 );
__swi __arm void MonitorFeedback_SetTimer( GUI_FEEDBACK*, int time, void (*callback)(BOOK*) );
__swi __arm int NOfMany_GetChecked( GUI_NOFMANY*, u16* buffer );
__swi __arm int NOfMany_GetCheckedCount( GUI_NOFMANY* );
__swi __arm void NOfMany_SetChecked( GUI_NOFMANY*, u16* checked_table, int items_count );
__swi __arm void NOfMany_SetCursor( GUI_NOFMANY*, int item );
__swi __arm void NOfMany_SetOnMessage( GUI_NOFMANY*, int (*proc)( GUI_MESSAGE* ) );
__swi __arm int OneOfMany_GetSelected( GUI_ONEOFMANY* );
__swi __arm void OneOfMany_SetChecked( GUI_ONEOFMANY*, int checked );
__swi __arm void OneOfMany_SetFocused( GUI_ONEOFMANY*, int item );
__swi __arm void OneOfMany_SetItemCount( GUI_ONEOFMANY*, int count );
__swi __arm void OneOfMany_SetOnMessage( GUI_ONEOFMANY*, int (*proc)( GUI_MESSAGE* ) );
__swi __arm void OrangeLED_Control( int _free_val, int or_LED_ID, int level, int fade_time );
__swi __arm void OSE_GetShell( void** pInterface );
__swi __arm void pb_ui_search_bk_create_search_menu( int BookID, int mode );
__swi __arm int PercentInput_GetPercent( GUI* PercentInput );
__swi __arm int PHF_GetState( void );
__swi __arm PROCESS* PID_MMI( void );
__swi __arm void PlayerControl( BOOK* AudioPlayerBook, int );
__swi __arm int PlayFile( const wchar_t* path, const wchar_t* fname );
__swi __arm int PlayFileV( const wchar_t* path, const wchar_t* fname, int vol );
__swi __arm void PlaySystemSound( int SndNumber );
__swi __arm png_voidp png_get_progressive_ptr( png_structp png_ptr );
__swi __arm png_uint_32 png_get_rowbytes( png_structp png_ptr, png_infop info_ptr );
__swi __arm png_uint_32 png_get_valid( png_structp png_ptr, png_infop info_ptr, png_uint_32 flag );
__swi __arm void png_set_gray_1_2_4_to_8( png_structp png_ptr );
__swi __arm void png_set_gray_to_rgb( png_structp png_ptr );
__swi __arm void png_set_palette_to_rgb( png_structp png_ptr );
__swi __arm void png_set_strip_16( png_structp png_ptr );
__swi __arm void png_set_tRNS_to_alpha( png_structp png_ptr );
__swi __arm void PNUM2str( char* str, BCD_TEXT pnum, int len, int max_len );
__swi __arm int PNUM_len( BCD_TEXT pnum );
__swi __arm int Profile_SetActive( int NUMprof, int set_in_gdfs_flag );
__swi __arm void ProgressBar_SetBarDisabled( GUI*, BOOL );
__swi __arm void ProgressBar_SetPercentValue( GUI*, int value );
__swi __arm void RedLED_Off( int __NULL );
__swi __arm void RedLED_On( int __NULL );
__swi __arm int rename( const wchar_t* oldpath, const wchar_t* oldfname, const wchar_t* newpath, const wchar_t* newfname, int zero );
__swi __arm void REQUEST_ALARMCLOCKSTATUS_GET( const int* sync, char* alarm_status );
__swi __arm void REQUEST_ALARMCLOCKTIME_GET( const int* sync, TIME* t );
__swi __arm void REQUEST_ALARMDATEANDTIMESTATUS_GET( const int* sync, DATETIME* );
__swi __arm void REQUEST_DATEANDTIME_GET( const int* sync, DATETIME* dt );
__swi __arm int REQUEST_DATEFORMAT_GET( const int* sync, char* DateFormat );
__swi __arm int Request_ICA_ShutdownAllConnections( const int* sync );
__swi __arm int REQUEST_PROFILE_GETACTIVEPROFILE( const int* sync, int* level );
__swi __arm void REQUEST_SETTING_ALLOWEDCALLERS_GET( const int* sync, int ProfileNum, char* state );
__swi __arm int REQUEST_SETTING_ALLOWEDCALLERS_SET( const int* sync, int unk, int mode );
__swi __arm int REQUEST_SETTING_ANSWERINGMODE_SET( const int* sync, int unk, int mode );
__swi __arm int REQUEST_SETTING_INCREASINGRING_SET( const int* sync, int unk, int unk2, int mode );
__swi __arm int REQUEST_SETTING_RINGTYPESOUNDFILE_SET( const int* sync, int null, wchar_t* path, wchar_t* name );
__swi __arm int REQUEST_SETTING_RINGVOLUME_SET( const int* sync, int unk, int null, int vol );
__swi __arm int REQUEST_SETTING_SILENCE_GET( const int* sync, u16 profile, char* silence_mode );
__swi __arm int REQUEST_SETTING_SILENCE_SET( const int* sync, u16 profile, u16 value );
__swi __arm int REQUEST_SETTING_VIBRATOR_SET( const int* sync, int unk, int mode );
__swi __arm int REQUEST_SYSTEM_RESTART( void );
__swi __arm int REQUEST_SYSTEM_SHUTDOWN( void );
__swi __arm int REQUEST_TIMEFORMAT_GET( const int* sync, char* TimeFormat );
__swi __arm void REQUEST_UI_OAF_START_APPLICATION( const int* sync, int appID, char* flag );
__swi __arm void RightNow_SetActive( int flag );
__swi __arm int rmdir( const wchar_t* path, int zero );
__swi __arm LIST** ROOT_APP( void );
__swi __arm UI_APP_SESSION* root_list_get_session( int num_session );
__swi __arm int root_list_get_session_count( void );
__swi __arm GUI* SBY_GetMainInput( BOOK* StandBy ); // !!!!! не настоящий !!!!!!
__swi __arm GUI* SBY_GetStatusIndication( BOOK* StandBy ); // !!!!! не настоящий !!!!!!
__swi __arm PROCESS sender( union SIGNAL** sig );
__swi __arm BOOK* SESSION_GetTopBook( UI_APP_SESSION* );
__swi __arm int SetFont( int );
__swi __arm int setjmp( jmp_buf jmpbuf );
__swi __arm void SetLampLevel( int level );
__swi __arm void SetTheme( wchar_t* path, wchar_t* name, int bookid, int unk_1 );
__swi __arm int Settings_ShowNumber_Get( char* state );
__swi __arm void SetTrayIcon( IMAGEID, char mode );
__swi __arm OSBOOLEAN set_envp( PROCESS pid, char* name, OSADDRESS value );
__swi __arm void Shortcut_Run( wchar_t* shortcut_name );
__swi __arm int snwprintf( wchar_t* buffer, int size, const wchar_t* fmt, ... );
__swi __arm void SoftKeys_GetLabel( DISP_OBJ* softkeys, SKLABEL* lbl, int id );
__swi __arm u16 SoftKeys_GetSelectedAction( void );
__swi __arm void SoftKeys_Update( DISP_OBJ* softkeys );
__swi __arm int SoundRecorderDesc_SetBookID( void* desc, int BookID );
__swi __arm int SoundRecorderDesc_SetFname( void* desc, const wchar_t* fname );
__swi __arm int SoundRecorderDesc_SetFolder( void* desc, const wchar_t* fpath );
__swi __arm int SoundRecorderDesc_SetRecordSize( void* desc, const int size );
__swi __arm int SoundRecorderDesc_SetType( void* desc, const int type );
__swi __arm int SpeedDial_GetPNUM( int _zero, char charter0__9, BCD_TEXT PNUM );
__swi __arm int sprintf( char* buf, const char* fmt, ... );
__swi __arm int sscanf( const char* buffer, const char* format, ... );
__swi __arm void start( PROCESS pid );
__swi __arm void StartAPP( const wchar_t* appname );
__swi __arm DISP_OBJ** StatusRow_p( void );
__swi __arm void stop( PROCESS pid );
__swi __arm void str2PNUM( BCD_TEXT pnum, char* str, int len, int max_len );
__swi __arm wchar_t* str2wstr( wchar_t* wstr, const char* str );
__swi __arm char* strcat( char* dest, const char* src );
__swi __arm int strcmp( const char* str1, const char* str2 );
__swi __arm char* strcpy( char* dest, const char* source );
__swi __arm int StringInput_DispObject_SetLanguage( DISP_OBJ_STRING_INPUT*, int langID, int flag );
__swi __arm int StringInput_GetCursorPosition( GUI*, u16* pos, char* _zero );
__swi __arm int StringInput_GetStringAndLen( GUI*, wchar_t**, u16* );
__swi __arm void StringInput_MenuItem_SetPriority( GUI* strinp, int prio, int actionID );
__swi __arm void StringInput_SetCursorPosition( GUI*, u16 curs_pos, char unk );
__swi __arm int strlen( const char* str );
__swi __arm int strncmp( const char* s1, const char* s2, int len );
__swi __arm char* strncpy( char* dest, const char* source, int maxlen );
__swi __arm char* strstr( const char* str1, const char* str2 );
__swi __arm void SUBPROC( void (*PROC)( int, void* ), int p1, void* p2 );
__swi __arm void SwitchRadioStationFromList( BOOK* FmRadioBook, int );
__swi __arm int swscanf( const wchar_t* buffer, const wchar_t* format, ... );
__swi __arm int TabMenuBar_GetFocusedTab( GUI_TABMENUBAR* );
__swi __arm void TabMenuBar_SetFocusedTab( GUI_TABMENUBAR*, int tab_num );
__swi __arm void TabMenuBar_SetOnTabSwitch( GUI_TABMENUBAR*, void (*proc)( BOOK*, int act_tab ) );
__swi __arm void TabMenuBar_SetTabCount( GUI_TABMENUBAR*, int count );
__swi __arm void TabMenuBar_SetTabGui( GUI_TABMENUBAR*, int tab, GUI* );
__swi __arm int textidname2id( const wchar_t* idname, int maxnamelen, TEXTID* id );
__swi __arm int TextID_GetLength( TEXTID );
__swi __arm void TextID_GetString( TEXTID, char* str, int maxlen );
__swi __arm int TextID_GetWString( TEXTID, wchar_t* dest, int maxlen );
__swi __arm int ThemeImage_Delete( int theme_image_type );
__swi __arm int ThemeImage_SetImage( int theme_image_type, int _zero, int __zero, const wchar_t* path, const wchar_t* fname, int wallp_scaling);
__swi __arm int Theme_DestroyMenuIcons( void );
__swi __arm unsigned int TimeInput_GetTimeInt( GUI* );
__swi __arm char* UIEventName( int event );
__swi __arm void UI_CONTROLLED_SHUTDOWN_RESPONSE( int book_id );
__swi __arm void UI_Event( int event );
__swi __arm void UI_Event_toBookID( int event, int BookID );
__swi __arm void UI_Event_toBookIDwData( int event, int BookID, void* message, void (*free_proc)( void* ) );
__swi __arm void UI_Event_toSID( int event, int sess_id );
__swi __arm void UI_Event_wData( int event, void* message, void (*free_proc)( void* ) );
__swi __arm void unixtime2datetime( int, DATETIME* );
__swi __arm int USB_isConnected( void );
__swi __arm void VCALL_Init( void* vc );
__swi __arm void VCALL_SetHZ1( void* vc, int, u16 );
__swi __arm void VCALL_SetHZ2( void* vc, u16 );
__swi __arm void VCALL_SetName( void* vc, wchar_t* name, unsigned short name_len );
__swi __arm void VCALL_SetNumber( void* vc, wchar_t* number, unsigned short num_len );
__swi __arm void VideoPlayerControl( BOOK* VideoPlayerBook, int );
__swi __arm void VideoResize_AllScreenMode( BOOK* VideoPlayerBook, u16 VideoWidth, u16 VideoHeight, u16* NewWidth, u16* NewHeight );
__swi __arm void VideoResize_AutomateMode( BOOK* VideoPlayerBook, u16 VideoWidth, u16 VideoHeight, u16* NewWidth, u16* NewHeight );
__swi __arm void Video_ActionBack( BOOK* VideoPlayerBook, void* );
__swi __arm void Video_ExtractFrame( BOOK* VideoPlayerBook, void* );
__swi __arm int Video_GetCurrentSkinID( BOOK* VideoPlayerBook );
__swi __arm void Video_Pause( BOOK* VideoPlayerBook, void* );
__swi __arm void Video_Play( BOOK* VideoPlayerBook, void* );
__swi __arm int Video_Refresh( BOOK* VideoPlayerBook, GUI* VideoPlayerGUI );
__swi __arm int Video_SetPermit( BOOK* VideoPlayerBook, u16 NewWidth, u16 NewHeight );
__swi __arm void Video_SetSkin( GUI* VideoPlayerGUI, int skinID );
__swi __arm void Video_Stop( BOOK* VideoPlayerBook, void* );
__swi __arm void Video_ZoomOn( BOOK* VideoPlayerBook, void* );
__swi __arm char* wstr2strn( char* str, const wchar_t* wstr, int maxlen );
__swi __arm wchar_t* wstrcat( wchar_t* wstr, const wchar_t* subwstr );
__swi __arm wchar_t* wstrchr( const wchar_t* source, wchar_t chr );
__swi __arm int wstrcmp( const wchar_t* wstr1, const wchar_t* wstr2 );
__swi __arm int wstrcmpi( const wchar_t* ws1, const wchar_t* ws2 );
__swi __arm int wstrcmpni( const wchar_t* wstr1, const wchar_t* wstr2, int len );
__swi __arm wchar_t* wstrcpy( wchar_t* dest, const wchar_t* source );
__swi __arm int wstrlen( const wchar_t* wstr );
__swi __arm wchar_t* wstrncat( wchar_t* wstr, const wchar_t* subwstr, int maxlen );
__swi __arm int wstrncmp( const wchar_t*, const wchar_t*, int );
__swi __arm wchar_t* wstrncpy( wchar_t* dest, const wchar_t* source, int maxlen );
__swi __arm void wstrnlwr( wchar_t* wstr, int maxlen );
__swi __arm void wstrnupr( wchar_t* wstr, int maxlen );
__swi __arm wchar_t* wstrrchr( const wchar_t* wstr, wchar_t wchar );
__swi __arm wchar_t* wstrwstr( const wchar_t* wstr1, const wchar_t* wstr2 );
__swi __arm int wtoi( const wchar_t* wstr, int len, int* dest );
__swi __arm int w_chdir( const wchar_t* path );
__swi __arm wchar_t* w_dirread( void* );
__swi __arm int w_fread( int f, void* buf, int size );
__swi __arm int w_fstat( const wchar_t* name, W_FSTAT* );
__swi __arm int w_fwrite( int f, void* buf, int size );
__swi __arm int w_lseek( int f, int offs, int mode );
__swi __arm int w_mkdir( const wchar_t* path, int mode );
__swi __arm int w_remove( const wchar_t* dir );
__swi __arm int w_rename( const wchar_t* dst, const wchar_t* src );
__swi __arm void XGUIList_AddGUIObject( XGUILIST* xguilist, GUI* );
__swi __arm void _REQUEST_OAF_START_APPLICATION( const int* sync, int __zero, MIDP_DESC*, int ___zero );
